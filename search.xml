<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>倒底如何解釋Event Loop</title>
      <link href="/2021/08/18/eventLoot/"/>
      <url>/2021/08/18/eventLoot/</url>
      
        <content type="html"><![CDATA[<h1 id="開頭"><a href="#開頭" class="headerlink" title="開頭"></a>開頭</h1><p>首先我們從它的運行機制Event Loop來說起。</p><p>首先科普一些基礎知識。</p><p>程序(進程)、執行緒(線程)</p><h2 id="進程-Process"><a href="#進程-Process" class="headerlink" title="進程 Process"></a>進程 Process</h2><p>Process 進程則是指被執行且載入記憶體的 program。Process 也是 OS 分配資源的最小單位，可以從 OS 得到如 CPU Time、Memory…等資源，意思是這個 process 在運行時會消耗多少 CPU 與記憶體。文章一開始放了一張 MacOS 活動監視器的截圖，相信不管是使用哪種作業系統的讀者都有看過類似的介面，而監視器中列出的是你的電腦正在執行的應用程式，而它們其實就是一個個 process。</p><h2 id="線程-Thread"><a href="#線程-Thread" class="headerlink" title="線程 Thread"></a>線程 Thread</h2><p>線程可以想像成存在於 process 裡面，而一個進程裡至少會有一個線程，前面有說 process 是 OS 分配資源的最小單位，而 thread 則是作業系統能夠進行運算排程的最小單位，也就是說實際執行任務的並不是進程，而是進程中的線程，一個進程有可能有多個線程，其中多個線程可以共用進程的系統資源。</p><h1 id="一個問題"><a href="#一個問題" class="headerlink" title="一個問題"></a>一個問題</h1><ul><li>在多線程操作下實現應用的並行處理，能夠以更高的CPU擴展提高整個程序的性能和語言處理能力都特別是現在，但JavaScript卻以單線程執行，為什麼呢？</li></ul><ul><li>答：JavaScript作為腳本語言，最初是為了避免複雜的同步問題（做人嘛，還是簡單點好，也一樣），如果JavaScript同時有兩個線程，一個線程中執行在某個DOM節點上添加，另一個線程執行刪除這個節點，瀏覽器會……</li></ul><figure class="image-box">                <img src="https://i.imgur.com/WcF9KrH.png" alt="一臉矇逼" title="" class="">                <p>一臉矇逼</p>            </figure><p>所以 JavaScript 的單線程是這門語言的核心，未來也不會改變。</p><p>事情說，那HTML5的新特性Web Worker，可以創建多線程呀～</p><p>是的，為了解決鸚鵡的這個操作（多重循環、複雜的這個操作操作），HTML5提出Web Worker，它會在當前的js執行主線程中開闢出一個額外的線程來運行js文件新的線程和js主線程之間不會互相影響，同時提供了數據交換的接口：postMessage和onMessage。</p><p>語言的設計和生活中的現實情況很像，IO設備（輸入輸出）很慢（比如Ajax），那麼語言的設計者鬧這一點，就在主線程中掛起等待中的任務，先運行沒有的任務，等IO設備有了結果，再把掛起的任務執行下去。</p><hr/><figure class="image-box">                <img src="https://i.imgur.com/eJHNSmK.png" alt="event loop" title="" class="">                <p>event loop</p>            </figure><p>從上到下可以看到，在主線程運行時，會產生堆（堆）和棧（棧）。</p><p>堆中存的是我們聲明的對像類型的數據，棧中存的是基本數據類型以及函數執行時的運行空間。</p><p>棧中的代碼會調用各種外部API，它們在任務中加入各種事件(onClick,onLoad,onDone)，只要棧中的代碼執行完畢(js引擎存在監控流程進程，會持續不斷的檢查主線程)執行棧是否為空），主線程就返回讀取任務，在按順序執行這些響應的響應函數。</p><p>到主線程從任務這個任務中讀取事件，所以這個過程是循環不斷的，所以這種運行機制又成為事件循環（事件循環）。</p><h1 id="步任務和異步任務"><a href="#步任務和異步任務" class="headerlink" title="步任務和異步任務"></a>步任務和異步任務</h1><p>我們將任務分為同步任務和異步任務。</p><p>同步任務就是在主線程上執行的任務，可以執行一個再執行下一個。</p><p>異步任務則不進入主線程，可能先在事件表中註冊函數，當滿足觸發條件後，可以進入任務召喚來執行。此任務將進入主線程執行。</p><ul><li>舉例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(c)  </span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// b</span></span><br></pre></td></tr></table></figure><p>1.console.log(a)是同步任務，進入主線程執行，印出a。</p><p>2.setTimeout是異步任務，先被動態事件表中註冊，1000ms後進入任務探測。</p><p>3.console.log(c)是同步任務，進入主線程執行，印出c。</p><p>當a，c被印出後，主線程去事件中找到setTimeout裡的函數，並執行，印出b。</p><h1 id="宏任務和微任務"><a href="#宏任務和微任務" class="headerlink" title="宏任務和微任務"></a>宏任務和微任務</h1><p>同步任務和異步任務的劃分細節宏觀，具體的分類方式是任務（Macrotask）和微任務（Microtask）。</p><p>宏任務包括：script(整體代碼)，I/O，setTimeout，setInterval，requestAnimationFrame，setImmediate。</p><p>設置立即只存在於節點中，requestAnimationFrame 只存在於瀏覽器中。</p><p>微任務包括： Promise，Object.observe(已廢棄)，MutationObserver(html5新特性)，process.nextTick。</p><p>還有process.nextTick只存在於Node中，MutationObserver只存在於瀏覽器中。</p><pre><code>UI Rendering不屬於宏任務，也不屬於微任務，它是一個與微任務類似的一個操作步驟。    https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model</code></pre><p>這些分類的執行，執行一個宏任務，過程中遇到的微任務時，將其現在微當前的事件捕捉，執行完後任務中的任務，具體可以查看詳細任務的細節，具體執行內容的微任務。如果還有宏任務的話，再重新開啟宏任務……</p><figure class="image-box">                <img src="https://i.imgur.com/ioUuMHH.png" alt="task" title="" class="">                <p>task</p>            </figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">i ==<span class="number">99</span> &amp;&amp; resolve();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// d</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// a</span></span><br></pre></td></tr></table></figure><ul><li>再舉例</li></ul><p>1.首先執行腳本下的宏任務，遇到setTimeout，將其原生宏任務的召喚裡。</p><ol start="2"><li>遇到Promise，new Promise直接執行，印出b。</li></ol><p>3.遇到然後方法，是微任務將其可以微任務的里。</p><p>4.遇到console.log(‘d’)，直接印出。</p><p>5.本輪宏任務發現執行完畢，查看微任務，然後方法裡的函數，印出c。</p><p>6.本輪事件循環全部完成。</p><p>7.下引發循環，先執行宏任務，宏任務產生一個，印出一個setTimeout。</p><h2 id="瘋狂的"><a href="#瘋狂的" class="headerlink" title="瘋狂的"></a>瘋狂的</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好，我們來逐步分析。</p><h3 id="第一輪事件循環："><a href="#第一輪事件循環：" class="headerlink" title="第一輪事件循環："></a>第一輪事件循環：</h3><ol><li><p>第一個宏任務(整體腳本)進入主線程，console.log(‘a’)，印出a。</p></li><li><p>遇到setTimeout，其觸發功能進入宏任務，暫定義為setTimeout1。</p></li><li><p>遇到process.nextTick()，其原因函數被傳到微任務請求，暫定義為process1。</p></li><li><p>遇到Promise，new Promise直接執行，印出g。 then進入微任務，暫定義為then1。</p></li><li><p>遇到setTimeout，其觸發功能進入宏任務，暫定義為setTimeout2。</p></li></ol><p>這時候我們看一下兩個任務中的情況</p><p>宏任務請求：setTimeout1、Timeout2</p><p>微任務請求：process1、then1</p><p>第一輪宏任務執行完畢，印出出a和g。</p><p>全部執行，印出f和h。</p><p>第一輪事件循環完畢，印出出a、g、f和h。</p><h3 id="第二輪事件循環："><a href="#第二輪事件循環：" class="headerlink" title="第二輪事件循環："></a>第二輪事件循環：</h3><ol><li><p>從setTimeout1宏任務開始，首先是console.lob(‘b’)，印出b。</p></li><li><p>遇到process.nextTick()，進入微任務，暫定義為process2。</p></li><li><p>Promise直接執行，然後進入微任務輸出，暫定義為then2。</p></li></ol><p>這兩個任務中</p><p>宏任務請求：setTimeout2</p><p>微任務請求：process2、 then2</p><p>第二輪宏任務執行完畢，印出出b和d。</p><p>全部執行，印出和e。</p><p>第二輪事件循環完畢，印出出b、d、c和e。</p><h3 id="第三輪事件循環"><a href="#第三輪事件循環" class="headerlink" title="第三輪事件循環"></a>第三輪事件循環</h3><ol><li><p>執行setTimeout2，遇到console.log(‘i’)，印出i。</p></li><li><p>遇到process.nextTick()，進入微任務，暫定義為process3。</p></li><li><p>new Promise直接執行，印出k。</p></li><li><p>then進入微任務，暫定義為then3。</p></li></ol><p>這兩個任務中</p><p>宏任務請求：空</p><p>微任務請求：process3、then3</p><p>第三輪宏任務執行完畢，印出出i和k。</p><p>全部執行，印出j和l。</p><p>第三輪事件循環完畢，印出出i、k、j和l。</p><p>到此為止，三輪事件循環結束，最終輸出結果為：</p><p>a、g、f、h、b、d、c、e、i、k、j、l</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美股投資兩個月心得</title>
      <link href="/2020/08/23/%E7%BE%8E%E8%82%A1%E6%8A%95%E8%B3%87%E5%85%A9%E5%80%8B%E6%9C%88%E5%BF%83%E5%BE%97/"/>
      <url>/2020/08/23/%E7%BE%8E%E8%82%A1%E6%8A%95%E8%B3%87%E5%85%A9%E5%80%8B%E6%9C%88%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="先說結論"><a href="#先說結論" class="headerlink" title="先說結論"></a>先說結論</h1><ul><li>有財富自由嗎? 我個人認為是沒有</li><li>投資可以賺大錢嗎? 運氣運氣 XD</li><li>此篇就是馬後炮+幹話+紀錄</li></ul><h1 id="一些故事"><a href="#一些故事" class="headerlink" title="一些故事"></a>一些故事</h1><h2 id="大盤"><a href="#大盤" class="headerlink" title="大盤"></a>大盤</h2><p>從今年年初開始的時候開始接觸美股(各種國外卷商)，認真玩大概是4月開始的時候。</p><p>我個人主要是用<a href="https://etoro.com/">e鮪魚</a>轉至歐洲監管做真實美股交易，那時候(3月原油之亂)剛完的時候發現有CDF的指數期貨可以玩，加上槓桿當天一個晚上直接賠了5000美金(<strong>沒錯就是5000…</strong>)(中間有賺有賠最終總和就是-5000)，直接不玩休息，想起來真的是好笑，沒做功課直接下去撒錢XD</p><p>休息一個月之後開始研究甚麼是長期投資，和一些該有的投資心理學素質，其實就是認真研究基本面多看歷史回測數據，了解到99%的人根本打不贏大盤(這裡指的是VTI)的報酬比(除非你是那億中選一的巴菲特或是有自己的買賣訊號)，所以不如直接投資這些ETF讓他帶你飛。</p><h2 id="波段-當沖"><a href="#波段-當沖" class="headerlink" title="波段/當沖"></a>波段/當沖</h2><p>但是心癢一定會想操作一些當沖或是波段，這也是最有趣的地方，因為本身是在菠菜業工作大概會去研究一些機率與投機心理學方面的東西，有學到不少XD<br>其實就是筋肉人那幾招:</p><ol><li>贏要衝，輸要縮，不要買下跌的股票</li><li>截短虧損，讓獲利奔跑(停損要快，獲利要抱)</li><li>短線交易讓我容易認錯，方向不對就趕緊認錯</li><li>投資人要選定一個方法深度鑽研，才能了解這個方法是否適合自己與是否有用。</li></ol><p>其實就是一直檢驗自己的眼光是否精準看看財報，被哪寫ETF所持股，CEO做了哪些事，國際上發生了哪些事情加以連結，持續調整到你的節奏而已。</p><h2 id="書的部分"><a href="#書的部分" class="headerlink" title="書的部分"></a>書的部分</h2><p>在這2個月其實只看了一本書(投資金律：建立獲利投資組合的四大關鍵和十四個關卡) <strong>The Four Pillars of Investing：Lessons for Building a Winning Portfolio</strong></p><p>裡面提到歷史的重演與證明所謂專家的投報率其實跟大盤部會相差多少，還有些長期投資應有的心理素質和一些檢的心理學</p><ul><li>群眾心理</li><li>時近效應</li><li>短視損失厭惡</li><li>好公司好股票</li></ul><p>最後才是投資策略。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="如何找投資標的"><a href="#如何找投資標的" class="headerlink" title="如何找投資標的"></a>如何找投資標的</h2><p>這個問題其實也是困擾我很久，到底那些人是從海裡撈出這些一大堆看起來不錯的標的的?</p><p>其實就是google，因為不像以前沒有這麼發達的網路與資訊，現在是太多很難選還看不完，這邊推薦幾個</p><p>免費:</p><ul><li>市場先生</li><li>雷司紀的小道投資|</li><li>etoro上明星投資著的標的</li><li>股癌大大的postcast</li><li>fintel.io 各種大型資金報告</li><li>好的ETF持股標的(抄作業好夥伴)</li><li>個大國家主權基金投資標的</li></ul><p>付費:</p><ul><li>美股軍師</li><li>達克豹</li><li>國外很多不勝枚舉</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>快速找出龍頭股票們的漲幅</p><ul><li>股票熱點圖: <a href="https://finviz.com/map.ashx?t=sec">https://finviz.com/map.ashx?t=sec</a></li></ul><p>一言不合就回測就知道誰贏了</p><ul><li>回測工具: <a href="https://www.portfoliovisualizer.com/backtest-portfolio">https://www.portfoliovisualizer.com/backtest-portfolio</a></li></ul><p>台灣我認為最好用的</p><ul><li>ETF查詢:<a href="https://www.moneydj.com/etf/x/default.xdjhtm">https://www.moneydj.com/etf/x/default.xdjhtm</a></li><li>基金查詢: <a href="https://invest.cnyes.com/funds/search?institutional=0">https://invest.cnyes.com/funds/search?institutional=0</a></li></ul><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>其實我是到上上禮拜才接觸到股癌的podcast，我用一個禮拜時間(上班之餘)把全部EP聽完，其實心法就差不多，好好找題材與未來趨勢，基本面好好研究，他配上面的工具，就能穩穩賺錢，不要在意一時的漲跌。</p><p>會覺得沒有財富自由是因為，你只會想要更多的錢真的就是這樣，不然那麼多有錢人為何還要繼續投資賺錢，就跟癌大說的一樣就是癌症瘋狂的做下去。</p><p>問我有發財嗎? 沒有，我照著我的腳步兩個月時間讓我總資產上升了8%，當然還沒彌補那5000美金虧損XD</p><p>真的最後了</p><blockquote><p>閒錢投資，專注本業</p><p>慢慢來真的比較快</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> investment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> investment </tag>
            
            <tag> 美股 </tag>
            
            <tag> 投資 </tag>
            
            <tag> sotck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css Backdrop-filter</title>
      <link href="/2019/09/29/css-backdrop-filter/"/>
      <url>/2019/09/29/css-backdrop-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Backdrop-filter-與-filter差異"><a href="#CSS-Backdrop-filter-與-filter差異" class="headerlink" title="CSS Backdrop-filter 與 filter差異"></a>CSS Backdrop-filter 與 filter差異</h1><p>通常要製造毛玻璃背景效果，會很麻煩的去使用偽元素<code>before</code>來去修飾單一圖層，達到毛玻璃的高斯模糊效果。</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><iframe height="600" style="width: 100%;" scrolling="no" title="How to Create a Frosted Glass Effect in CSS - Method 1" src="https://codepen.io/dandanXO/embed/YzKbLbG?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/dandanXO/pen/YzKbLbG'>How to Create a Frosted Glass Effect in CSS - Method 1</a> by Dandan  (<a href='https://codepen.io/dandanXO'>@dandanXO</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>會發現，它其實就只是修飾這個元素下面底層元素其實是沒有關係的，如果要做到移動就會非常麻煩。</p><h2 id="Backdrop-filter"><a href="#Backdrop-filter" class="headerlink" title="Backdrop-filter"></a>Backdrop-filter</h2><p>但 <code>backdrop-filter</code> 則剛好相反，是對添加此濾鏡的元素的下層元素的快照添加濾鏡</p><iframe height="600" style="width: 100%;" scrolling="no" title="How to Create a Frosted Glass Effect in CSS - Method 2" src="https://codepen.io/dandanXO/embed/aborKzz?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/dandanXO/pen/aborKzz'>How to Create a Frosted Glass Effect in CSS - Method 2</a> by Dandan  (<a href='https://codepen.io/dandanXO'>@dandanXO</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h3 id="Backdrop-filter-應用"><a href="#Backdrop-filter-應用" class="headerlink" title="Backdrop-filter 應用"></a>Backdrop-filter 應用</h3><p>這樣只要一張背景圖就可以做到各種上層濾淨效果</p><iframe height="600" style="width: 100%;" scrolling="no" title="backdrop-filter demo" src="https://codepen.io/dandanXO/embed/YzKbvNQ?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/dandanXO/pen/YzKbvNQ'>backdrop-filter demo</a> by Dandan  (<a href='https://codepen.io/dandanXO'>@dandanXO</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h2 id="進一步研究"><a href="#進一步研究" class="headerlink" title="進一步研究"></a>進一步研究</h2><p>其實會發現 <code>Backdrop-filter</code>並不會對本身的元素做出濾淨效果，下面可以清楚看到，圖片下方下層元素被濾鏡而原始的圖片卻沒有。</p><iframe height="500" style="width: 100%;" scrolling="no" title="Apply Filter to Psuedo Element" src="https://codepen.io/dandanXO/embed/RwbmJgj?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/dandanXO/pen/RwbmJgj'>Apply Filter to Psuedo Element</a> by Dandan  (<a href='https://codepen.io/dandanXO'>@dandanXO</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>總結來說，還不錯省了很多麻煩事，不然以前只能仰賴 <code>JS</code> 去做這件事情。<br>另外這個css 功能很早就發布了，同事無意間看到最近瀏覽器開始支援了就分享給出來。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intersection Observer</title>
      <link href="/2019/08/25/Intersection-Observer/"/>
      <url>/2019/08/25/Intersection-Observer/</url>
      
        <content type="html"><![CDATA[<h1 id="Intersection-Observer-for-Infinite-Scroll-in-Vue-Applications"><a href="#Intersection-Observer-for-Infinite-Scroll-in-Vue-Applications" class="headerlink" title="Intersection Observer for Infinite Scroll in Vue Applications"></a>Intersection Observer for Infinite Scroll in Vue Applications</h1><p>Infinite scrolling 在現代化網站中是一個非常常用的技巧，當觸發某些條件時而再去loading資料，可以給網站的效能帶來大幅的提升。</p><p>然而對於前端工程來說，不是一件簡單的事。第一，需要去監聽並控制 scrolling 的事件、行為與屬性。.</p><p>有個比較簡單且原生的方式就是<code>Intersection Observer API</code> ，這個api提供了<code> asynchronously observe changes</code> 在 <code>intersection</code>元素中或是最高層級的 <a href="https://developer.mozilla.org/en-US/docs/Glossary/viewport">viewport</a>的位置所佔的比重，說那麼多一定聽不懂，下面就直接用vue開始吧。</p><h2 id="The-Intersection-and-observation-process"><a href="#The-Intersection-and-observation-process" class="headerlink" title="The Intersection and observation process"></a>The Intersection and observation process</h2><p>被監聽的目標是一種與跟(<code>root</code>)相對位置的概念，當目標碰到root教會觸發回調函數(<a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Callback_function">callbaock</a>)，可以用下面的突來解釋會比較清楚。</p><figure class="image-box">                <img src="https://i.imgur.com/Sb52iTw.png" alt="root" title="" class="">                <p>root</p>            </figure><h2 id="Create-an-Intersection-Observer"><a href="#Create-an-Intersection-Observer" class="headerlink" title="Create an Intersection Observer"></a>Create an Intersection Observer</h2><p>因此我們把<code>app.vue</code>當成我們的 <code>root</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">null</span>, <span class="comment">/* uses the page as root */</span></span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(callback, options);</span><br></pre></td></tr></table></figure><p>以上為主要的宣告方式</p><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>可以選擇根的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#divAsRoot&#x27;</span>), <span class="comment">/* uses the Div element as root */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h3><p>可以指定閥值的表示型式</p><figure class="image-box">                <img src="https://i.imgur.com/XQkLf8h.png" alt="threshold" title="" class="">                <p>threshold</p>            </figure><p>您可能希望觀察者僅在目標進入視圖中途（50％），完全在視圖中（100％）或第二次進入視圖（0％）時執行回調。閾值是你決定的方式。它默認為0意味著即使一個像素在視圖中，觀察者也將執行回調。值為1.0表示在每個像素都在視圖中之前，回調將不會運行。0.5也是如此。僅當目標位於視圖的一半時才會觸發回調。</p><h2 id="What-should-we-build"><a href="#What-should-we-build" class="headerlink" title="What should we build?"></a>What should we build?</h2><p>用 <a href="https://randomuser.me/"> Random Users API.</a>來取得資料，當scroll滑到最底觸發我們的目標，然後處發回調函數在一次取的我們要的資料。</p><h2 id="Create-a-Vue-project"><a href="#Create-a-Vue-project" class="headerlink" title="Create a Vue project"></a>Create a Vue project</h2><blockquote><p>創建</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue create scrolling-demo</span><br><span class="line">cd scrolling-demo</span><br><span class="line">npm install --save axios</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><blockquote><p>建立一個 fetchUsers 的function 在beforeMount之前執行他</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- src/App.vue --&gt; </span><br><span class="line">    </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">users</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">fetchUsers</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        axios.get(<span class="string">`https://randomuser.me/api/`</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.users.push(response.data.results[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(response)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.fetchUsers();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>你會看到下面的情形。</p><figure class="image-box">                <img src="https://i.imgur.com/FZSRk9h.png" alt="demo" title="" class="">                <p>demo</p>            </figure><p>把畫面與api資料用<code>v-for</code>帶出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.id.value&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;user.picture.large&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.name.first &#125;&#125; &#123;&#123; user.name.last &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">&quot;target&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像這樣</p><figure class="image-box">                <img src="https://i.imgur.com/VPnazHL.jpg" alt="demo" title="" class="">                <p>demo</p>            </figure><p>接下來加入我們的loadin目標</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divAsTarget&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Loading ... <span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> /* below the user&#x27;s list */</span><br></pre></td></tr></table></figure><p>之後再加入<code>intersection</code>監聽事件，綁訂於上述的taqrget</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.observer = <span class="keyword">new</span> IntersectionObserver(<span class="built_in">this</span>.callback, options);</span><br><span class="line"><span class="built_in">this</span>.observer.observe(<span class="built_in">this</span>.$refs.divAsTarget);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後在回掉函數中檢查是否觸發目標</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">callback</span>(<span class="params">entries, observer</span>)</span> &#123;</span><br><span class="line">  entries.forEach(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">       <span class="built_in">this</span>.fetchUsers();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後的demo</p><figure class="image-box">                <img src="https://d2mxuefqeaa7sj.cloudfront.net/s_B8F443BB34687E4E41FAC225AEB7751E88C3233AB4506AA668D0CCE979F5CBDF_1550865275193_ezgif.com-video-to-gif+73.gif" alt="demo" title="" class="">                <p>demo</p>            </figure><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>我把程式碼都放上去了，方便大家使用。</p><blockquote><p><a href="https://github.com/dandanXO/Intersection-Observer-">Repositories on GITHUB</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> webApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>電獺三個月回顧</title>
      <link href="/2019/08/18/%E9%9B%BB%E7%8D%BA%E4%B8%89%E5%80%8B%E6%9C%88%E5%9B%9E%E9%A1%A7/"/>
      <url>/2019/08/18/%E9%9B%BB%E7%8D%BA%E4%B8%89%E5%80%8B%E6%9C%88%E5%9B%9E%E9%A1%A7/</url>
      
        <content type="html"><![CDATA[<figure class="image-box">                <img src="https://i.imgur.com/ERiucye.jpg?1" alt="電獺aotter" title="" class="">                <p>電獺aotter</p>            </figure><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也不太知道要怎麼說起，當初想要來這家公司是因為，跟我理想的工作環境很相符，而且有自己開發的產品做的事情也很有趣，就投履歷惹。</p><h1 id="面試"><a href="#面試" class="headerlink" title="面試"></a>面試</h1><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>大概是4月底吧，發現電獺有在應徵前端工程師(剛好技能點都差不多)就投了履歷，人資也很快在第二天下午就打電話來，在下禮拜星期二約了第一次面試時間。第一次進到這麼美式的辦公室，在前往會議室路上發現有吧檯、開方式工作座位與遊戲室，跟介紹上面的一樣不唬爛。</p><p>這次是創辦人(執行長)、副執行長、前端大大，3對1一起面試(一整個超緊張XD)，過程中問了一些個人特質，之前工作的經驗與解決甚麼問題，最印象深刻的大概就是為甚麼要做前端吧</p><blockquote><p>除了可以有鉉砲的視覺之外，大概就是錢吧XDD  </p><blockquote><p>-我回答</p></blockquote></blockquote><p>我想面試官也被我的誠實給驚豔了，另外我也問了一個很棘手的問題</p><blockquote><p>創立這家公司或是加入覺得開心嗎?</p></blockquote><p>後續就聊了蠻多他們關於草創初期一堆血淚史，最後不免俗當然是約二面的時間與回家作業的繳交。</p><h2 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h2><p>想要看程式碼 <a href="https://github.com/dandanXO/blog_test">這裡</a></p><p>回家作業內容是做一個沒有後台的blog不限定任何框架，加分題是大流量的話要如何解決與自己的想法，我加上了<a href="https://socket.io/">socketio</a>做的及時聊天4天之後我就交作業了(期限好像是一星期)，這四天每次的commit對放都有看，也都會有信件回覆很尊重面試者，過了一星期就收到了確定二面通知。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>這次就比較硬一點，直接討論作業與一些改進方式，印象比較深刻的是<a href="https://www.mongodb.com/">mongodb</a>的objectID的問題，副執行長說這個ID其實是可以解開的，裡面其實就包含了時間戳記，這樣對話紀錄就不用而外記錄一個時間了(很方便不是嗎?)，哈哈我整個被洗臉這時才知道原來可以這樣用XDD，再來就是白板提考說直接實做一個<code>array</code>的<code>reduce</code>在過程中雖然有點卡，不過還是寫出來了(應該XD)，最後就是討論薪資福利等等了，有鑑於我上次問的問題都差不多問到核心了，所以這次就沒啥問，結束這回合。</p><h1 id="上工"><a href="#上工" class="headerlink" title="上工"></a>上工</h1><h2 id="平常"><a href="#平常" class="headerlink" title="平常"></a>平常</h2><p>第一個禮拜其實就是認識環境與人，安裝工作環境( <del>實際上沒做啥事情XD</del> )，接下來開始指派一些簡單的功能讓我實現，順便了解整個專案在幹麻，因為code都要進github pr review所以不能想怎麼寫就怎麼寫，到處都是證據，同事也會推薦我一些有趣的工具與網站讓我觀摩學習，這三個月熟悉的新東西有<a href="https://developer.chrome.com/extensions">chrome Extension</a>、<a href="https://tailwindcss.com/">tailwind</a>、<a href="https://www.nginx.com/">nginx</a>和一些開發或是發布ci/cd流程等等，還有一些原本就會的(<code>vue,nuxt,react,mongodb,js,process,postcss,html...</code>)阿里阿渣的東西就不說了，另外同事蠻會帶人的，不會直接給我答案而是要我去找文件並自己發掘應該怎麼樣然後再修正我，跟我預期的很像。</p><h2 id="另一個計畫"><a href="#另一個計畫" class="headerlink" title="另一個計畫"></a>另一個計畫</h2><p>老大將後端JS部分全面改成TS(有一段路要走)，目前有一兩個專案正在執行這樣的方式，對我來說也是一個挑戰，我雖然有JAVA OO 的概念但是久了沒寫還是會生疏QQ。</p><h2 id="與設計師的溝通"><a href="#與設計師的溝通" class="headerlink" title="與設計師的溝通"></a>與設計師的溝通</h2><p>有藝術家的專業與設計但也有工程師的邏輯，溝通起來非常容易另外，我發現電獺的設計師非常的強，除了基本的Wireframe、Mockup與Prototype，有些看不慣的地方還會直接把我們前端工程師的CSS親自改code，只能說請受小弟一拜。</p><h2 id="自由-amp-休息"><a href="#自由-amp-休息" class="headerlink" title="自由&amp;休息"></a>自由&amp;休息</h2><p>其實，公司給的彈性非常大，想休息就離開座位去吧台尋找食物與飲料，或是去遊戲室玩個switch放鬆一下，說不定奇怪的bug等等就想到解法了。</p><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>想法嗎?</p><p>也才來三個月未來會待多久或是跳槽，我也不知道。</p><p>不過我相信還有很多東西可以讓我繼續學習。</p><blockquote><p>需要非常努力 才能看起來豪不費力</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>metascraper</title>
      <link href="/2019/08/11/metascraper/"/>
      <url>/2019/08/11/metascraper/</url>
      
        <content type="html"><![CDATA[<h1 id="Metascraper"><a href="#Metascraper" class="headerlink" title="Metascraper"></a>Metascraper</h1><figure class="image-box">                <img src="https://i.imgur.com/RVBXhLv.png" alt="metascraper" title="" class="">                <p>metascraper</p>            </figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>現在都講求速度的文化連爬蟲都是，因此發現了這個套件<a href="https://metascraper.js.org/#/">metascraper</a>，有一些內建的規自動掃秒<code>html dom</code>文本與一些規則的<code>meta dat</code>。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p><a href="https://www.npmjs.com/">npm</a> 一如往常簡單</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install metascraper --save</span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> metascraper = <span class="built_in">require</span>(<span class="string">&#x27;metascraper&#x27;</span>)([</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-author&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-date&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-description&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-image&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-logo&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-clearbit&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-publisher&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-title&#x27;</span>)(),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;metascraper-url&#x27;</span>)()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;got&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> targetUrl = <span class="string">&#x27;http://www.bloomberg.com/news/articles/2016-05-24/as-zenefits-stumbles-gusto-goes-head-on-by-selling-insurance&#x27;</span></span><br><span class="line"></span><br><span class="line">;(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">body</span>: html, url &#125; = <span class="keyword">await</span> got(targetUrl)</span><br><span class="line">  <span class="keyword">const</span> metadata = <span class="keyword">await</span> metascraper(&#123; html, url &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(metadata)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>輸出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Ellen Huet&quot;</span>,</span><br><span class="line">  <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2016-05-24T18:00:03.894Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The HR startups go to war.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;image&quot;</span>: <span class="string">&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ioh_yWEn8gHo/v1/-1x-1.jpg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;publisher&quot;</span>: <span class="string">&quot;Bloomberg.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;As Zenefits Stumbles, Gusto Goes Head-On by Selling Insurance&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://www.bloomberg.com/news/articles/2016-05-24/as-zenefits-stumbles-gusto-goes-head-on-by-selling-insurance&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何運作的"><a href="#如何運作的" class="headerlink" title="如何運作的"></a>如何運作的</h2><p>來看看他怎麼運作的吧</p><h3 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h3><p>其實很簡單只做函數柯里化<a href="https://cythilya.github.io/2017/02/27/currying-in-javascript/">(可以參考這裡)</a>輸入規則函數變數與一些錯誤檢查，並且合併規則</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; isUrl &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@metascraper/helpers&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> whoops = <span class="built_in">require</span>(<span class="string">&#x27;whoops&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergeRules = <span class="built_in">require</span>(<span class="string">&#x27;./merge-rules&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loadRules = <span class="built_in">require</span>(<span class="string">&#x27;./load-rules&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loadHTML = <span class="built_in">require</span>(<span class="string">&#x27;./load-html&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> getData = <span class="built_in">require</span>(<span class="string">&#x27;./get-data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MetascraperError = whoops(<span class="string">&#x27;MetascraperError&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">rules</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> loadedRules = loadRules(rules)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (&#123; url, html, <span class="attr">rules</span>: inlineRules, <span class="built_in">escape</span> = <span class="literal">true</span> &#125; = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isUrl(url)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> MetascraperError(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;Need to provide a valid URL.&#x27;</span>,</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&#x27;INVALID_URL&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getData(&#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="built_in">escape</span>,</span><br><span class="line">      <span class="attr">htmlDom</span>: loadHTML(html),</span><br><span class="line">      <span class="attr">rules</span>: mergeRules(inlineRules, loadedRules)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="預設規則"><a href="#預設規則" class="headerlink" title="預設規則"></a>預設規則</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;metascraper-author&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-date&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-description&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-image&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-logo&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-clearbit&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-publisher&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-title&#x27;</span>)(),</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">&#x27;metascraper-url&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>上面這些規則裡面都是柯里化<a href="https://cythilya.github.io/2017/02/27/currying-in-javascript/">(可以參考這裡)</a>的參數，舉例來說<code>metascraper-title</code>長這個樣子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; $filter, title &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@metascraper/helpers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrap = <span class="function"><span class="params">rule</span> =&gt;</span> <span class="function">(<span class="params">&#123; htmlDom &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> value = rule(htmlDom)</span><br><span class="line">  <span class="keyword">return</span> title(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">title</span>: [</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;meta[property=&quot;og:title&quot;]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>)),</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;meta[name=&quot;twitter:title&quot;]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>)),</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;.post-title&#x27;</span>).text()),</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;.entry-title&#x27;</span>).text()),</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;h1[class*=&quot;title&quot; i] a&#x27;</span>).text()),</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;h1[class*=&quot;title&quot; i]&#x27;</span>).text()),</span><br><span class="line">    wrap($ =&gt; $filter($, $(<span class="string">&#x27;title&#x27;</span>)))</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就只是把每個規則變成陣列函數，然後遍歷一遍判斷產生的結果然後回傳至最終物件，然後印出來。</p><h2 id="實際寫一個-ptt-cc-規則"><a href="#實際寫一個-ptt-cc-規則" class="headerlink" title="實際寫一個 ptt.cc 規則"></a>實際寫一個 ptt.cc 規則</h2><p>其實就是用核心<code>html掃描</code>就是用<a href="https://cheerio.js.org/">cheeio</a>去實現因此，自己建立規則遵照<a href="https://cheerio.js.org/">cheeio</a>與<a href="https://jquery.com/">jquery</a>方式去寫規則語法與限制</p><p>直接來看程式碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable prefer-const */</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrap = <span class="function"><span class="params">rule</span> =&gt;</span> <span class="function">(<span class="params">&#123; htmlDom, url &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> value = rule(htmlDom, url)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">author</span>: [</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;.article-metaline:first-child .article-meta-value&#x27;</span>).text())</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">kanban</span>: [wrap($ =&gt; $(<span class="string">&#x27;.article-metaline-right .article-meta-value&#x27;</span>).text())],</span><br><span class="line">  <span class="attr">date</span>: [</span><br><span class="line">    wrap($ =&gt; $(<span class="string">&#x27;.article-metaline:nth-child(4) .article-meta-value&#x27;</span>).text())</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">context</span>: [</span><br><span class="line">    wrap($ =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> text = $(<span class="string">&#x27;#main-content&#x27;</span>)</span><br><span class="line">        .clone()</span><br><span class="line">        .children(<span class="string">&#x27;:not(a)&#x27;</span>)</span><br><span class="line">        .remove()</span><br><span class="line">        .end()</span><br><span class="line">        .text()</span><br><span class="line">      <span class="keyword">let</span> imageUrls = []</span><br><span class="line">      <span class="keyword">let</span> rowTexts = text.replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      rowTexts = rowTexts.replace(</span><br><span class="line">        <span class="regexp">/(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|gif|png)/g</span>,</span><br><span class="line">        <span class="function">(<span class="params">matched, index, original</span>) =&gt;</span> &#123;</span><br><span class="line">          imageUrls.push(matched)</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;@@@$#&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">let</span> pureTexts = rowTexts.split(<span class="string">&#x27;@@@$#&#x27;</span>)</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">rebuild</span>(<span class="params">imageUrls, pureTexts</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> length =</span><br><span class="line">          imageUrls.length &gt;= pureTexts.length</span><br><span class="line">            ? imageUrls.length</span><br><span class="line">            : pureTexts.length</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (pureTexts[i]) &#123;</span><br><span class="line">            result.push(&#123; <span class="attr">type</span>: <span class="string">&#x27;TEXT&#x27;</span>, <span class="attr">content</span>: pureTexts[i] &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (imageUrls[i]) &#123;</span><br><span class="line">            result.push(&#123; <span class="attr">type</span>: <span class="string">&#x27;IMAGE&#x27;</span>, <span class="attr">content</span>: imageUrls[i] &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">text</span>: text,</span><br><span class="line">        <span class="attr">sections</span>: rebuild(imageUrls, pureTexts)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">comments</span>: [</span><br><span class="line">    wrap($ =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> content = []</span><br><span class="line">      <span class="comment">// 空白很重要</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">checkReaction</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target === <span class="string">&#x27;→ &#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target === <span class="string">&#x27;推 &#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;like&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target === <span class="string">&#x27;噓 &#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;disLike&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">checkDate</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> dateArray = date.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          dateArray[dateArray.length - <span class="number">2</span>] +</span><br><span class="line">          <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">          dateArray[dateArray.length - <span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">&#x27;.push&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        content.push(&#123;</span><br><span class="line">          <span class="attr">reaction</span>: checkReaction(</span><br><span class="line">            $(<span class="built_in">this</span>)</span><br><span class="line">              .children(<span class="string">&#x27;.push-tag&#x27;</span>)</span><br><span class="line">              .text()</span><br><span class="line">          ),</span><br><span class="line">          <span class="attr">user</span>: $(<span class="built_in">this</span>)</span><br><span class="line">            .children(<span class="string">&#x27;.push-userid&#x27;</span>)</span><br><span class="line">            .text(),</span><br><span class="line">          <span class="attr">content</span>: $(<span class="built_in">this</span>)</span><br><span class="line">            .children(<span class="string">&#x27;.push-content&#x27;</span>)</span><br><span class="line">            .text(),</span><br><span class="line">          <span class="attr">date</span>: checkDate(</span><br><span class="line">            $(<span class="built_in">this</span>)</span><br><span class="line">              .children(<span class="string">&#x27;.push-ipdatetime&#x27;</span>)</span><br><span class="line">              .text()</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> content</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其實可以看到我將整個ptt.cc文章結構化之後輸出，結果像這樣</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&lt;String&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;kanban&quot;</span>: <span class="string">&quot;&lt;String&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;&lt;IOS DATE&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;context&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;&lt;String&gt;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sections&quot;</span>: [&#123;imageUrls, pureTexts&#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;comments&quot;</span>: [&#123;user,content,date&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後使用mongodb去儲存，就完成ptt的爬蟲了。</p><h1 id="寫在文後"><a href="#寫在文後" class="headerlink" title="寫在文後"></a>寫在文後</h1><p>會知道這個套件，這其實也是用在工作上的一寫小工具，感覺還蠻有趣的因此就拿來玩玩惹。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> metascraper </tag>
            
            <tag> 爬蟲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome-extension with Vue</title>
      <link href="/2019/08/03/chrome-extesion/"/>
      <url>/2019/08/03/chrome-extesion/</url>
      
        <content type="html"><![CDATA[<h1 id="Google-Chrome-Extension-with-Vue"><a href="#Google-Chrome-Extension-with-Vue" class="headerlink" title="Google Chrome Extension with Vue"></a>Google Chrome Extension with Vue</h1><img src="https://i.imgur.com/1MJYlKy.png" alt="google chrome" width="500"/><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>話說開始研究 <a href="https://developer.chrome.com/home">extension</a> 之前需要有點<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference">Javascript</a>的基礎，後續的內容也比較容易理解。</p><p>瀏覽器擴充功能其實算是老掉牙的東西了，不過我剛好會寫一點 Vue ，所以我在想有沒有辦法把Vue 整個 instance 塞到擴充套件裡面所以，加上有開發 的需求，就開始研究之路</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>你可能會需要一個 Vue 的工具方便作業，在 github 上面，已經有人提供了完整的 Vue Template 可以使用，所以，最快的方式就是用 Vue CLI 的方式去安裝。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init kocal/vue-web-extension my-extension</span><br></pre></td></tr></table></figure><p>然後，我們的第一個擴充功能就這樣做完了呢，裝起來就會 Hello World ！好棒棒！(<del>打完收工結束</del>)</p><p>這個 Template 本身支援的項目有，</p><ul><li>Mozilla’s web-extension polyfill</li><li>Vuex</li><li>Vue Router</li><li>Axios</li><li>ESLint</li><li>Prettier</li></ul><h2 id="除了-Vue-之外"><a href="#除了-Vue-之外" class="headerlink" title="除了 Vue 之外"></a>除了 Vue 之外</h2><p>雖然這個東西很方便，但是基本上你還是得理解擴充功能之間的溝通關係，這些東西說起來有點冗長，具體來說可以參考一下官方文件：</p><ul><li><a href="https://developer.chrome.com/extensions">https://developer.chrome.com/extensions</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Mozilla/Add-ons/WebExtensions">https://developer.mozilla.org/zh-TW/docs/Mozilla/Add-ons/WebExtensions</a></li></ul><blockquote><p><a href="https://github.com/mozilla/webextension-polyfill">https://github.com/mozilla/webextension-polyfill</a></p></blockquote><p>當然，這種相容性擴充不意外的是 Mozilla 自己推出的。</p><p>##啟動</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run watch:dev</span><br></pre></td></tr></table></figure><p> 雖然他提供了 popup, options 與 background 三種運作方式，但，如果我是想要在特定頁面做手腳呢？這個時候，你必須要回頭去參考官方文件，在 manifest.json 需要額外做出一些設定，</p><p>然後你在 <code>src/</code> 目錄底下，就能新增一個 <code>content.js</code> 的檔案，來做你想要做的事情。不過，你可能會發現，即便在 <code>src/</code> 放好了 <code>content.js</code>，但是好像不會動？是，你還是需要去修改 <code>webpack.config.js</code> 檔案，要把 <code>content.js</code> 放入 <code>entry</code> 區段中。</p><p>大概是這樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="string">&#x27;background&#x27;</span>: <span class="string">&#x27;./background.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;popup/popup&#x27;</span>: <span class="string">&#x27;./popup/popup.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;options/options&#x27;</span>: <span class="string">&#x27;./options/options.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 你需要新增在這邊</span></span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;./content.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="關於-content-js-與-content-css"><a href="#關於-content-js-與-content-css" class="headerlink" title="關於 content.js 與 content.css"></a>關於 content.js 與 content.css</h2><p>如果你的 content.js 當中，有使用到 Vue Components 的話，他會自動把樣式全部打包到 content.css 底下，這一點相當方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">&#x27;./myComponent.vue&#x27;</span>;</span><br><span class="line"><span class="comment">// ... 後略</span></span><br></pre></td></tr></table></figure><h2 id="關於各種元件溝通"><a href="#關於各種元件溝通" class="headerlink" title="關於各種元件溝通"></a>關於各種元件溝通</h2><p>首先呢，你所看到的 <code>popup</code> 與 <code>options</code> 頁面，基本上都可以看做是各別獨立的 Vue Instance 來看。所以，倘若你的 <code>content.js</code> 需要跟 <code>popup</code> 溝通，那麼你需要的是靠 <code>background.js</code> 來當中間人。</p><blockquote><p><a href="https://developer.chrome.com/extensions/background_pages">https://developer.chrome.com/extensions/background_pages</a></p></blockquote><p>這個中間人可以幫你做一些溝通，利用 chrome.runtime 這一類的元件來透過瀏覽器的運作過程之間的訊息往返，具體可以使用。</p><ul><li><code>chrome.runtime.onMessage.addListener</code> 用來監聽訊息。</li><li><code>chrome.runtime.sendMessage, chrome.tabs.sendMessage</code> 用來發送訊息。</li></ul><p>這兩件事情是比較入門款的操作，實際可以使用的行為還是請參考官方文件 <a href="https://developer.chrome.com/extensions/runtime">runtime</a>, <a href="https://developer.chrome.com/extensions/tabs">tabs</a> 說明。在官方文件總覽的 Architecture 區塊，也有大概介紹了元件之間的溝通方式，想要更瞭解細部操作的人可以閱讀一下</p><blockquote><p><a href="https://developer.chrome.com/extensions/overview">https://developer.chrome.com/extensions/overview</a></p></blockquote><h1 id="回到-Vue-本身"><a href="#回到-Vue-本身" class="headerlink" title="回到 Vue 本身"></a>回到 Vue 本身</h1><p>既然解決了溝通方式，那麼原本就使用 Vue 開發的人應該就沒有什麼困難點了。比較不一樣的地方在於，擴充功能本身的溝通，即便你本身有使用 Vuex 之類的工具，你在整個 App 裡面，還是要有地方去監聽從其他地方送回來的東西（如果你有需要的話）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也就是說，你可能需要在 mounted 放入一些監聽動作</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">    chrome.runtime.onMessage.addListener(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 我拿到別的地方送來的 data</span></span><br><span class="line">        <span class="comment">// 然後我可以更新 Vuex 或是其他的東西</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，你倘若有使用 Vuex 的話，就可以不用每一個元件的 mounted 都放監聽動作，否則，在你需要監聽更動或是需要的地方，都還是得加入這件事情，不然元件本身應該是不會反應的。若是不想，那麼拋去給 EventBus 也是可以，但是操作方法雷同，使用 Vuex 還是比較省事一點。</p><h2 id="關於-Polyfill"><a href="#關於-Polyfill" class="headerlink" title="關於 Polyfill"></a>關於 Polyfill</h2><p>上述所提到的 chrome.runtime 是特別針對 Google Chrome 所使用，如果你是在 Mozilla Firefox 開發的話，那麼你可能需要使用 browser.extension 來呼叫。如果你有安裝相容性擴充的話，你只要寫成這樣，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="built_in">require</span>(<span class="string">&#x27;webextension-polyfill&#x27;</span>);</span><br><span class="line">browser.runtime.onMessage.addListener(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ... 中略</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這樣就可以了。而你在 Vue Template 當中，看他的範例會這樣寫，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">global</span>.browser = <span class="built_in">require</span>(<span class="string">&#x27;webextension-polyfill&#x27;</span>);</span><br></pre></td></tr></table></figure><p>所謂的 global 在這個開發工具中，等同於最外部的 window 的意思，換句話說，就是在全域中放入一個叫做 browser 的東西。那麼，你在任何地方使用 global.browser，就等同於 window.browser 的意思。</p><h1 id="寫在文末"><a href="#寫在文末" class="headerlink" title="寫在文末"></a>寫在文末</h1><p>因為公司有產品開發的需求想說就升入研究一下，發現extension可以取得瀏覽器非常大的權限，像是cookie瀏覽紀錄等等，似乎都是搜集資訊的手段，越研究越發現很多extension感覺都很恐怖.</p><blockquote><p>ps. Firefox 的附加元件，如果你要安裝自行開發的版本，需要進入 about:debugging 才能安裝。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> Vue </tag>
            
            <tag> chrome-extension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饒河夜市</title>
      <link href="/2019/07/27/%E9%A5%92%E6%B2%B3%E5%A4%9C%E5%B8%82/"/>
      <url>/2019/07/27/%E9%A5%92%E6%B2%B3%E5%A4%9C%E5%B8%82/</url>
      
        <content type="html"><![CDATA[<h1 id="饒河夜市"><a href="#饒河夜市" class="headerlink" title="饒河夜市"></a>饒河夜市</h1><h2 id="先來張入口圖片吧"><a href="#先來張入口圖片吧" class="headerlink" title="先來張入口圖片吧"></a>先來張入口圖片吧</h2><figure class="image-box">                <img src="https://lh3.googleusercontent.com/DldXCFJ1e_nPUPNC-HClElQUlcSOJAZNZ0_2c8gaoPZD1i23ZnAK2C-qMMzTfqktvonGJTrFW24LwGMWi4KAzasiFwrXMKIA2rLwPAz-MaJpEUMeb0onDWflGfm3F69r6Tdd6ERhiVR7OvqloMiQBw8-cgX9xd24okZGMKmh2YFgKfZDUDRT3-bTUJI4fkKCu0AdfYbH94304klZZx7iI3I-ixGDS3O_ETrvx689M7MVrHw9_Q1XxU8A5nXx1Vya_fcFxKCCAW5Iw2llk1QKjPAatSawRhu3tusFsewIFBPDjz3LgKrlYPJfUt4xYiA43XIKndgKoX0h6bsfO951FPtealzzQMruwYepWBdO6tIQCt_PLQw6VfdUCMO8Qp7c0bfMXmo3O1NvMAtDKmXt9lEw2uTaQObyucjSK-7hvjZJ_Q-y3NBSuqFv4T8t7ShyCygUpYEyjTLHwnbcNeqMrS8lhlX7x5_8gKGSYu87LxCV6a6ZJNrkHwOygeYuNU79v9v61Pu4-rhjnTtfdwSRfROE8hhgwIgB818TnHBvyGLnnlhtnEaS8w5ZG8-VD3DpTy2054jfBwMHcT-438GllwGtYty5VA2rBvG0Xzvwwnb2dBHVaOYDqM9tKUR5FzRNvKmkfxZHWHpBzswSH8YTDvrm0HKXAXE=w1303-h977-no" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>為甚麼突然去饒河夜市呢?</p><p>兩位友人來台北玩，不知道要去哪也沒目的地只好去逛夜市了</p><p>在逛的過程其實沒有拍任何照片，因為我覺得真的沒什麼好拍的，雖然我也是第一次去饒河夜市，但完全沒有啟發我的興趣</p><p>只有拍了鐘與廟的入口</p><figure class="image-box">                <img src="https://lh3.googleusercontent.com/k1eS1dpgJLhdTfH1QB4wQeZOtMJXrNcUgdvAlW10wF8wy2SRQoyDVCJUMFJqsl-L81ClHNflGVcdrsXY5h12xmBwv_afkaKIpj6WOgCv_DQ7_KKWfXxUqboPCp_24xl4FWRLmkzFDohes7Fd6dUlAxyHFfgs8cqw9vqSosZNPZ_WyRPUOqa0mhiQ9l0ZnuMChEIYzvdwVZ0qtVibFST7LoHQmeggh-hmMnENAH0eCERe1akXRy81gJny4sAh2h5wEbTVirKbAIzsRT507iceloybND58MEx1md9aEOypEKgCDhABcNwT2UxeH5effU30k2Hgee_Gb8fgYRTs-MA07pZSkLYw52aIQAf8aJ_-b6IsCfMGeMTJQg67w6eRr3jgcLDBjno1L7I8D6trZtwFviAIUKFoxfoJa6hwBI6lB4y7F8KUoS4lfBWPGfQX-fIYNgYqsGn1wqMVW19kYE0vQZDFYzOgsTvmD4Mau90JLOTV40GEWoylPCJa0cnLyKtWt5JoO_u3WcpMwZUow7AmwI7MX4DptNI8i2l4fuGPzlKYSHAozMwRaHy21MT9QerV9SYOrpnodO1NehXO96oty_03g_3aSyGD1fM3HEV5kMbKq2mP5VT05Pc5quViuk1me9VV7DAP9ud2SpWYlKdx62W0C0pWkRY=w733-h977-no" alt="機械時鐘" title="" class="">                <p>機械時鐘</p>            </figure><figure class="image-box">                <img src="https://lh3.googleusercontent.com/8Pnjge2t1xL5gfXvryhnY48zeGgmxo-eWZp4TcpsqS4st6TLry33RNjEsp1XLweIlhO-8mKYwAN4vri4OsN4qKGAlsTGT06a4Y-v-onSz271ceYfTHFXmAvFCZzSxl0WKIP8J5I3SgU75xr9vS3DwspjNCDDjfAYn9hr4dOHNs_KfX-92zwB7jH4Tx6AiKKxyEwOkOpwr1d0r6v3-hSDi5h3HOX2DqgqZkv1ezRrlTSTLUVbHkpoGT-7zCTOAFQP34IO7eK2JXkde4IziVhxPdlEfCE-PBMRtwhoDo4g9n517xMYOIPJcaEUVhPQuPaGq4p0q7Ntqi9bqWkiL6x86CP-ZMc5GvD3HG_zg8zSFrC5qHdkpbpLFhq4Vlllgfu9uAhCZKqSeo6Mg-e1rgzvFmePYPlLiYrycsV-bc18SheOXqXGpQHo3G-T29OhtZztBPtgU0_tj48DFwyyyaPy3fwWwfjyl32b1ZEyyE6hxW-0clCkL9k6uUNGJk6s0n7syn4xiRRBGo8pHzHHnFtY0exdN9SUnZ9i8T4KD1TsGN_JrxJQRCaSMqnWVi4eNN07bTYFj25oLNqpmWY-GXypWgEf2DIImCvPGo3foR5WycF57n5buucxY9N_-X5IRer4lFela71BAfG3ytFS_Ho6I5jI20HJqjw=w1303-h977-no" alt="慈祐宮" title="" class="">                <p>慈祐宮</p>            </figure><h2 id="夜市發現的問題"><a href="#夜市發現的問題" class="headerlink" title="夜市發現的問題"></a>夜市發現的問題</h2><ol><li>價格問題<ul><li>發現很多店賣的東西都差不多，而且有些價格會偷灌水變得很高，讓人不敢下手</li><li>有些商品並非首座或是原創，大多都是從大陸或淘寶進來的</li></ul></li><li>環境問題<ul><li>周邊清潔：攤販的水源有所限制，清潔碗盤常只是過水用菜瓜布抹兩下便沖水，因此許多人使用碗筷皆會用紙巾再擦拭。   客人離開後，桌面清潔所使用的抹布也髒黑不已，令人畏懼。</li><li>食物清潔：飲用水來源不清楚，飲料使用合格用水與否，食材暴露於空氣中未妥善保存，街道旁人車往來，都是無法確保飲食新鮮度。</li><li>攤販清潔：製作食物時沒有戴口罩、手套，雙手處理食材同時又找錢給顧客。</li></ul></li><li>垃圾髒亂問題<ul><li>垃圾製造：免洗碗筷、塑膠袋、飲料杯被大量使用，一攤攤購買下來手上提了不少一次性、可拋式的垃圾。</li><li>分類問題：隨手就丟，懶得分類，造成垃圾污染蚊蟲孳生。</li><li>垃圾桶設置：偌大的夜市找不到垃圾桶丟棄手上的垃圾，走了老遠卻發現垃圾桶常爆滿。</li></ul></li></ol><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>思考一下，台灣的夜市充滿濃濃人情味，叫賣文化、跟老闆殺價，這些極有親切感的情境都非現代化的百貨公司或商場可以看得到的。夜市帶來了群聚的商機，但某種程度來說，噪音、垃圾、油煙等問題，確實也為當地社區帶來了一些困擾，同質性的商品與商店充斥在夜市裡，更遑論隨意變造改裝的非法攤販，特色沒了，剩下的只是居民的愿對和吵雜的人群。相當多的假冒品與地下將記載這裡面流動。</p><p>夜市每年產生的經濟價值是不容小覰的，既然也被政府定義為國內觀光資源之一，那麼就必須更重視夜市的經營規劃與管理，這絕非單靠興建新型的市場空間就能夠完成，還必須更深入瞭解當地商圈形態、社區文化等，才能忠實呈現每個夜市的特色，同時與當地居民取得生存上的平衡。</p><h2 id="最後來個10秒縮時吧"><a href="#最後來個10秒縮時吧" class="headerlink" title="最後來個10秒縮時吧"></a>最後來個10秒縮時吧</h2><div  style=" width:100%;height:300px; margin-bottom:30px;" ><iframe width="100%" height="100%" src="https://www.youtube.com/embed/DYEocCY6sHw?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 夜市 </tag>
            
            <tag> 小吃 </tag>
            
            <tag> 台灣文化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網路監視器直播</title>
      <link href="/2019/03/10/%E7%B6%B2%E8%B7%AF%E7%9B%A3%E8%A6%96%E5%99%A8%E7%9B%B4%E6%92%AD/"/>
      <url>/2019/03/10/%E7%B6%B2%E8%B7%AF%E7%9B%A3%E8%A6%96%E5%99%A8%E7%9B%B4%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="網路監視器直播"><a href="#網路監視器直播" class="headerlink" title="網路監視器直播"></a>網路監視器直播</h1><p>對於網絡攝像機做視頻預覽這塊, 本身其實是非常陌生的, 當時接到這個需求也是相當的頭疼(對於當時一年經驗不到的我來說).當時我們的應用場景是: 多路網絡攝像機通過局域網連接, PC 端能夠實時預覽監控畫面並且畫質達到720p, 延遲不能超過10秒, 多個攝像機能夠切換查看. 由於後端只提供一個RTSP 的直播協議, 所以所有的方案都是圍繞著RTSP這個關鍵詞.</p><h1 id="整體想法"><a href="#整體想法" class="headerlink" title="整體想法"></a>整體想法</h1><p>經過一波調研(google)之後, 知道瀏覽器對RTSP 協議並不友善, 也就是說我們必須要自己轉碼再提供給瀏覽器使用, 找到的解決思路大概是:</p><ol><li>轉碼: FFmpeg是一個老牌的轉碼工具,非常強大</li><li>Node.js 用作中轉站接收客戶端發來的攝像機信息及控制FFmpeg 推流</li><li>最終客戶端接收視頻流</li></ol><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><h2 id="安裝FFmpeg-轉碼工具"><a href="#安裝FFmpeg-轉碼工具" class="headerlink" title="安裝FFmpeg 轉碼工具"></a>安裝FFmpeg 轉碼工具</h2><ul><li><p>window 平台<br>下載FFmpeg解壓後應該是已經編譯好的文件</p><ol><li>將解壓好的文件放入C 盤根目錄(也可以自行放入其他盤符)下重命名為ffmpeg(方便以後找)</li><li>設置環境變量, 我的電腦-&gt; 屬性-&gt; 高級系統設置-&gt; 環境變量-&gt; 系統變量-&gt; 新增, 路徑選擇剛剛C 盤下的ffmpeg文件夾中的bin 文件夾</li><li>註銷或重啟電腦讓環境變量生效</li><li>測試,在cmd中輸入ffmpeg -version,如果出現版本號之類的東西則成功.</li></ol></li><li><p>Mac平台</p><ol><li>Mac下可以直接通過Homebrew安裝最為簡單.</li><li>安裝Homebrew,在終端中輸入ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></li><li>安裝FFmpeg,直接在終端中輸入brew install ffmpeg即可</li><li>測試,同樣在終端中輸入ffmpeg -version查看版本號</li></ol></li></ul><h2 id="安裝Node-js"><a href="#安裝Node-js" class="headerlink" title="安裝Node.js"></a>安裝Node.js</h2><p>這個就不展開詳細說了,每個有在工作都會吧…</p><h1 id="jsmpeg"><a href="#jsmpeg" class="headerlink" title="jsmpeg"></a>jsmpeg</h1><p>這個庫還算比較不錯的了,也是通過websocket來轉發,看官方的例子是在終端中啟動ffmpeg -&gt; websocket -&gt;客戶端通過jsmpeg.min.js解碼在canvas中播放.因為這裡只是實現了播放,然後又去找了一個基於jsmpeg的庫node-rtsp-stream .這個庫只是做了一些封裝讓我們不用自己在終端中手動啟用ffmpeg,在此之上我再加上重啟就能滿足現在的需求.</p><h2 id="改造-node-rtsp-stream"><a href="#改造-node-rtsp-stream" class="headerlink" title="改造 node-rtsp-stream"></a>改造 <code>node-rtsp-stream</code></h2><ol><li><p><code>node-rtsp-stream/mpeg1muxer.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Generated by CoffeeScript 2.3.2</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Mpeg1Muxer, child_process, events, util;</span><br><span class="line"></span><br><span class="line">  child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  Mpeg1Muxer = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key, self;</span><br><span class="line">    self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.url = options.url;</span><br><span class="line">    <span class="built_in">this</span>.ffmpegOptions = options.ffmpegOptions;</span><br><span class="line">    <span class="built_in">this</span>.additionalFlags = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ffmpegOptions) &#123;</span><br><span class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> <span class="built_in">this</span>.ffmpegOptions) &#123;</span><br><span class="line">        <span class="built_in">this</span>.additionalFlags.push(key, <span class="built_in">String</span>(<span class="built_in">this</span>.ffmpegOptions[key]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.spawnOptions = [</span><br><span class="line">      <span class="string">&quot;-rtsp_transport&quot;</span>,</span><br><span class="line">      <span class="string">&quot;tcp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;-i&quot;</span>,</span><br><span class="line">      <span class="built_in">this</span>.url,</span><br><span class="line">      <span class="string">&#x27;-f&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;mpeg1video&#x27;</span>,</span><br><span class="line">      <span class="comment">// additional ffmpeg options go here</span></span><br><span class="line">      ...this.additionalFlags,</span><br><span class="line">      <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="built_in">this</span>.stream = child_process.spawn(<span class="string">&quot;ffmpeg&quot;</span>, <span class="built_in">this</span>.spawnOptions, &#123;</span><br><span class="line">      <span class="attr">detached</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.inputStreamStarted = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.stream.stdout.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.emit(<span class="string">&#x27;mpeg1data&#x27;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.stream.stderr.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.emit(<span class="string">&#x27;ffmpegError&#x27;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.stream.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// console.log(self.stream.pid)</span></span><br><span class="line">      self.stream.stdin.pause();</span><br><span class="line">      self.stream.kill()</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;ffmpeg is be kill&#x27;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.stream.on(<span class="string">&#x27;exit&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.emit(<span class="string">&#x27;ffmpegClose&#x27;</span>, code)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  util.inherits(Mpeg1Muxer, events.EventEmitter);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = Mpeg1Muxer;</span><br><span class="line"></span><br><span class="line">&#125;).call(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></li><li><p><code> node-rtsp-stream/videoStream.js</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line">        <span class="comment">// Generated by CoffeeScript 2.3.2</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Mpeg1Muxer, STREAM_MAGIC_BYTES, VideoStream, events, util, ws;</span><br><span class="line"></span><br><span class="line">  ws = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  Mpeg1Muxer = <span class="built_in">require</span>(<span class="string">&#x27;./mpeg1muxer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  STREAM_MAGIC_BYTES = <span class="string">&quot;jsmp&quot;</span>; <span class="comment">// Must be 4 bytes</span></span><br><span class="line"></span><br><span class="line">  VideoStream = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.options = options;</span><br><span class="line">    <span class="built_in">this</span>.name = options.name;</span><br><span class="line">    <span class="built_in">this</span>.streamUrl = options.streamUrl;</span><br><span class="line">    <span class="built_in">this</span>.width = options.width;</span><br><span class="line">    <span class="built_in">this</span>.height = options.height;</span><br><span class="line">    <span class="built_in">this</span>.wsPort = options.wsPort;</span><br><span class="line">    <span class="built_in">this</span>.inputStreamStarted = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.stream = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.startMpeg1Stream();</span><br><span class="line">    <span class="built_in">this</span>.pipeStreamToSocketServer();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  util.inherits(VideoStream, events.EventEmitter);</span><br><span class="line"></span><br><span class="line">  VideoStream.prototype.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.wsServer.close();</span><br><span class="line">    <span class="built_in">this</span>.stream.kill();</span><br><span class="line">    <span class="built_in">this</span>.inputStreamStarted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 重新連線</span></span><br><span class="line">  VideoStream.prototype.restart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.mpeg1Muxer) &#123;</span><br><span class="line">        <span class="built_in">this</span>.mpeg1Muxer.stream.stop()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ffmpeg is restart&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.inputStreamStarted = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.stream = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.startMpeg1Stream();</span><br><span class="line">        <span class="comment">// 檢查 ffmpeg 是否壞掉或關閉</span></span><br><span class="line">        <span class="built_in">this</span>.mpeg1Muxer.on(<span class="string">&#x27;ffmpegClose&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;ffmpeg closed on &#x27;</span> + code)</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  VideoStream.prototype.startMpeg1Stream = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gettingInputData, gettingOutputData, inputData, outputData, self;</span><br><span class="line">    <span class="built_in">this</span>.mpeg1Muxer = <span class="keyword">new</span> Mpeg1Muxer(&#123;</span><br><span class="line">      <span class="attr">ffmpegOptions</span>: <span class="built_in">this</span>.options.ffmpegOptions,</span><br><span class="line">      <span class="attr">url</span>: <span class="built_in">this</span>.streamUrl</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.stream = <span class="built_in">this</span>.mpeg1Muxer.stream;</span><br><span class="line">    self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.inputStreamStarted) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.mpeg1Muxer.on(<span class="string">&#x27;mpeg1data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.emit(<span class="string">&#x27;camdata&#x27;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">    gettingInputData = <span class="literal">false</span>;</span><br><span class="line">    inputData = [];</span><br><span class="line">    gettingOutputData = <span class="literal">false</span>;</span><br><span class="line">    outputData = [];</span><br><span class="line">    <span class="built_in">this</span>.mpeg1Muxer.on(<span class="string">&#x27;ffmpegError&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> size;</span><br><span class="line">      data = data.toString();</span><br><span class="line">      <span class="keyword">if</span> (data.indexOf(<span class="string">&#x27;Input #&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        gettingInputData = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (data.indexOf(<span class="string">&#x27;Output #&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        gettingInputData = <span class="literal">false</span>;</span><br><span class="line">        gettingOutputData = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (data.indexOf(<span class="string">&#x27;frame&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        gettingOutputData = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (gettingInputData) &#123;</span><br><span class="line">        inputData.push(data.toString());</span><br><span class="line">        size = data.match(<span class="regexp">/\d+x\d+/</span>);</span><br><span class="line">        <span class="keyword">if</span> (size != <span class="literal">null</span>) &#123;</span><br><span class="line">          size = size[<span class="number">0</span>].split(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span> (self.width == <span class="literal">null</span>) &#123;</span><br><span class="line">            self.width = <span class="built_in">parseInt</span>(size[<span class="number">0</span>], <span class="number">10</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (self.height == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> self.height = <span class="built_in">parseInt</span>(size[<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.mpeg1Muxer.on(<span class="string">&#x27;ffmpegError&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">global</span>.process.stderr.write(data);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  VideoStream.prototype.pipeStreamToSocketServer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self;</span><br><span class="line">    self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.wsServer = <span class="keyword">new</span> ws.Server(&#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="built_in">this</span>.wsPort</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.wsServer.on(<span class="string">&quot;connection&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.onSocketConnect(socket);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.wsServer.broadcast = <span class="function"><span class="keyword">function</span>(<span class="params">data, opts</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i, results;</span><br><span class="line">      results = [];</span><br><span class="line">      <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="built_in">this</span>.clients) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.clients[i].readyState === <span class="number">1</span>) &#123;</span><br><span class="line">          results.push(<span class="built_in">this</span>.clients[i].send(data, opts));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          results.push(<span class="built_in">console</span>.log(<span class="string">&quot;Error: Client (&quot;</span> + i + <span class="string">&quot;) not connected.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> results;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.on(<span class="string">&#x27;camdata&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.wsServer.broadcast(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  VideoStream.prototype.onSocketConnect = <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self, streamHeader;</span><br><span class="line">    <span class="comment">// Send magic bytes and video size to the newly connected socket</span></span><br><span class="line">    <span class="comment">// struct &#123; char magic[4]; unsigned short width, height;&#125;</span></span><br><span class="line">    self = <span class="built_in">this</span>;</span><br><span class="line">    streamHeader = <span class="keyword">new</span> Buffer(<span class="number">8</span>);</span><br><span class="line">    streamHeader.write(STREAM_MAGIC_BYTES);</span><br><span class="line">    streamHeader.writeUInt16BE(<span class="built_in">this</span>.width, <span class="number">4</span>);</span><br><span class="line">    streamHeader.writeUInt16BE(<span class="built_in">this</span>.height, <span class="number">6</span>);</span><br><span class="line">    socket.send(streamHeader, &#123;</span><br><span class="line">      <span class="attr">binary</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>: New WebSocket Connection (`</span> + <span class="built_in">this</span>.wsServer.clients.length + <span class="string">&quot; total)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> socket.on(<span class="string">&quot;close&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code, message</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>: Disconnected WebSocket (`</span> + self.wsServer.clients.length + <span class="string">&quot; total)&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = VideoStream;</span><br><span class="line"></span><br><span class="line">&#125;).call(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></li><li><p>node 端使用</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Stream = <span class="built_in">require</span>(<span class="string">&#x27;node-rtsp-stream&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">streams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stream;</span><br><span class="line">        <span class="built_in">this</span>.restartStream.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stream = <span class="keyword">new</span> Stream(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;cameraStream&#x27;</span>,</span><br><span class="line">            <span class="attr">streamUrl</span>: <span class="string">&#x27;rtsp://192.168.2.236/user=admin&amp;password=&amp;channel=1&amp;stream=0.sdp&#x27;</span>,</span><br><span class="line">            <span class="attr">wsPort</span>: <span class="number">9999</span>,</span><br><span class="line">            <span class="attr">reconnect</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">ffmpegOptions</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;-reconnect&#x27;</span> :<span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;-reconnect_at_eof&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;-reconnect_streamed&#x27;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="comment">//&#x27;-hide_banner&#x27;: &#x27;&#x27;,</span></span><br><span class="line">                <span class="comment">//&#x27;-loglevel&#x27;: &#x27;panic&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.stream.mpeg1Muxer.on(<span class="string">&#x27;ffmpegClose&#x27;</span>,  <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;ffmpeg closed on need restart &#x27;</span> + code);</span><br><span class="line">            <span class="built_in">this</span>.restartStream();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    restartStream () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;restart stream&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.stream.restart()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = streams; <span class="comment">// stream;</span></span><br></pre></td></tr></table></figure></li><li><p><code>index.js</code> 引入</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Stream = <span class="built_in">require</span>(<span class="string">&#x27;./cameraStream&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cameraStream</span></span><br><span class="line"><span class="keyword">const</span> streams = <span class="keyword">new</span> Stream();</span><br><span class="line">streams.start();</span><br></pre></td></tr></table></figure></li><li><p>Client端</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&#x27;can&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;jsmpeg.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#can&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:11111&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> player = <span class="keyword">new</span> jsmpeg(ws, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">canvas</span>: canvas,</span></span><br><span class="line"><span class="javascript">        <span class="attr">autoplay</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>目前這方法沒出啥問題，不過有時候FFMPEG在瀏覽器端會出現編譯錯誤問題，不知道原因為何。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node-rtsp-stream </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>退伍後一些記錄</title>
      <link href="/2019/02/16/%E9%80%80%E4%BC%8D%E5%BE%8C%E4%B8%80%E4%BA%9B%E8%A8%98%E9%8C%84/"/>
      <url>/2019/02/16/%E9%80%80%E4%BC%8D%E5%BE%8C%E4%B8%80%E4%BA%9B%E8%A8%98%E9%8C%84/</url>
      
        <content type="html"><![CDATA[<h1 id="終於登出國軍online了"><a href="#終於登出國軍online了" class="headerlink" title="終於登出國軍online了"></a>終於登出國軍online了</h1><p> 歷經四個月的洗禮(<del>摧殘</del>)，順利從台中后里586旅順利出來了!</p><ul><li>地點：台中后里</li><li>單位：    陸軍586旅 586R 步二營 2B 步三連 3C</li><li>入伍日期：2018/9/3</li></ul><p>入伍前的準備我個人覺得蠻少的，攜帶的東西有</p><ul><li>自己的內褲</li><li>手機</li><li>過敏藥</li><li>接近一千塊的金錢</li><li>基本盥洗用具（三合一沐浴乳、牙刷牙膏、刮鬍刀）</li><li>袖珍包衛生紙</li><li>手錶（重要）</li><li>LED小檯燈…大概就這樣，一般推薦的防蚊液跟爽身粉我都沒帶，</li><li>借用好鄰兵的就好（誤），其實本來想說反正營站都買得到所以不帶，</li><li>但後來發現四個月我們連上只去了一次營站就是伍當天…</li></ul><p>接著剛入伍的三到四天，其實應該大家都差不多，有一堆事情要做，領取和清點裝備、填寫感覺永遠寫不完個人資料、各種內務整理教學包含摺棉被蚊帳雨衣迷彩上衣，然後藉由一些機會教育教我們該怎麼答有答話立正稍息等等。</p><p>時間很趕，每個班長都會催你甚至直接開罵，領完東西後就是剪頭髮，如果你在外面有先理了幾乎是光頭的狀態，那你有機會被叫說不用剃，但我那時先剃了個三分頭，還是被拍拍肩膀叫我過去剃，看著別人被理髮阿婆畫個兩刀就結束了，心裡覺得很不爽，明明他剃完的長度也跟我差不多，為什麼我還要多花一次錢？</p><p>當下毅然決然地走回去跟班長說我剃好了，然後就回到位置上，直到後來在收錢的時候我跟輔導長說我那時候沒剃，省下$50 XD 到晚上也沒什麼休息時間，大多都拿來寫資料了，而洗澡也很趕，完全瞭解什麼叫做戰鬥澡，反正前幾天就是在一陣匆忙混亂中度過，</p><p>記得可以的話早點調適好心態，像我第一個禮拜都有點難入眠，環境突然的轉變絕對會讓人適應不良，所以儘早調適好對自己是很有好處的。</p><h1 id="整理幾項重點"><a href="#整理幾項重點" class="headerlink" title="整理幾項重點"></a>整理幾項重點</h1><h2 id="1-假期當過兵的一定能體會想放假的心情，"><a href="#1-假期當過兵的一定能體會想放假的心情，" class="headerlink" title="1. 假期當過兵的一定能體會想放假的心情，"></a>1. 假期<br>當過兵的一定能體會想放假的心情，<br></h2><p>  每天畫日期算還有幾天放假都是家常便飯，<br><br>  基本上現在當兵都是周休二日，<br><br>  但是在第一階段的新訓，為了訓練成效，<br><br>  假期有被調整了一下，<br><br>  就是剛剛提過的懇親假跟結訓假，<br><br>  除此之外第一階段的五週都是沒有周休二日的。<br><br>  第二階段開始就是周休二日，<br><br>  沒有意外的話都是禮拜六早上六點就可以走，禮拜天的下午七點收假，<br><br>  我個人覺得這樣完全沒比較好，<br><br>  因為這樣實際上放不到一天的假，不過還是沒辦法要求太多，<br><br>  有得放就要偷笑了啊！</p><h2 id="2-作息"><a href="#2-作息" class="headerlink" title="2. 作息"></a>2. 作息<br></h2><p>  新訓期間的作息一向都滿規律的，每天幾乎都一樣:<br><br>    真的很無聊<br></p><pre><code>                            5:30 起床                            5:40 集合運動或打掃                            6:40 吃早餐                            7:40 集合開始第一堂課                           11:20 上午操課結束                           11:40 吃午餐                           12:10 下餐廳午休                           13:40 午休結束下午操課開始                           16:30 下午操課結束，開始運動或打掃                           17:40 吃晚餐                           18:10 下餐廳洗澡休息                           19:00 晚上操課(大部分是室內課)                           21:00過後就寢                           然後隔天再循環一次這樣</code></pre><p>  其實休息時間滿多的，除了剛開始的幾天對事情比較不熟悉會覺得休息不到以外，<br><br>  其他時候真的是都在耍廢啊!<br><br>  所以也不用太擔心體力負擔不來，基本上只要是個正常人都可以承受的，<br><br>  只是自己願不願意撐而已。<br><br>  不過如果操課中有任何身體不適的話，要直接跟幹部或班長反應，<br><br>  感覺上幹部比我們自己還擔心我們受傷XD<br></p><h2 id="3-食"><a href="#3-食" class="headerlink" title="3. 食"></a>3. 食<br></h2><p>  關於食物我只能說，<br><br>  <strong><strong>你最好別抱太大的期望因為真的超難吃</strong></strong><br>  我永遠忘不了第一天晚餐走進餐廳聞到那味道想吐的感覺，<br><br>  打完菜以後看那食物的顏色真的很懷疑這可以吃嗎？<br><br>  進去的前三天幾乎沒吃甚麼東西，<br><br>  還有其他同梯的一整個禮拜都只喝湯的。<br><br>  不過，那種所謂對好吃食物的堅持，大概在一個禮拜以後你就放棄了，<br><br>  你會看到大家和樂融融的在餐廳裡吃起來，<br><br>  多半都是習慣了…<br><br>  所以如果遇到下課時間可以投飲料，或是可以去OK，<br><br>  請千萬把握機會啊!!!!!!<br><br>  因為那不只是自由的滋味，也是真正能吃的東西啊!!!!!!!<br></p><h2 id="4-衣"><a href="#4-衣" class="headerlink" title="4. 衣 "></a>4. 衣 <br></h2><p>  基本上在軍中穿的衣服就是公發的衣服，<br><br>  迷彩服、草綠內衣、運動短褲，<br><br>  鞋子也是迷彩靴跟黑豹白豹運動鞋。<br><br>  洗衣服也是由部隊的洗衣部負責，<br><br>  所以應該沒什麼大問題。<br><br>  但是有一點我一定要說，<br><br>  就是內褲建議是帶自己的內褲進去穿，<br><br>  因為公發的三角褲穿起來總覺得不太舒服，<br><br>  所以懇親假之後我就帶自己的內褲進去穿了，<br><br>  不過也是有被洗壞掉的風險，<br><br>  還是自己評估一下有沒有需要。<br></p><h2 id="5-住"><a href="#5-住" class="headerlink" title="5. 住"></a>5. 住<br></h2><p>  部隊裡當然是睡在大寢室裡啦!<br><br>  就是你在軍教片裡看到的那種四個人一張的雙層床。<br><br>  好不好睡當然是見仁見智啦，<br><br>  但是要怎麼在一片鼾聲中睡著就是個人功力了…<br><br>  還有就是需要一點運氣成分，<br><br>  像我睡到一張爛床的上鋪，<br><br>  樓下的一翻身樓上就好像地震一樣，<br><br>  而且那個位置還吹不到冷氣跟電扇!!!!!<br><br>  活像是在蒸籠裡睡覺。<br><br>  然後睡醒了千萬要把棉被蚊帳摺好，<br><br>  不要拿自己的假開玩笑。<br></p><h2 id="6-行"><a href="#6-行" class="headerlink" title="6. 行"></a>6. 行<br></h2><p>   部隊裡當然是用走的啊!<br><br>   扛著搶全副武裝行軍(走整個旅)是常有的事情<br><br>   打靶也是，因為營區沒有靶場要走到外面(大約2km)，說遠不遠說近不近，扛著搶全副武裝真的熱到靠杯<br></p><h2 id="7-操課"><a href="#7-操課" class="headerlink" title="7. 操課"></a>7. 操課<br></h2><p>  比起前面，這應該是大家更關心的問題，<br><br>  基本上操課就是那些陳腔濫調，<br><br>  刺槍術、射擊、核生化、軍歌、機械訓練<br><br>  上課的班長好像在教白癡一樣，都講得很慢又講很多次，<br><br>  所以幾乎都能學到通過鑑測這樣。<br></p><p>  除了打靶需要看一點天分，其他東西其實超級簡單的，<br><br>  不過當兵都沒帶腦子去就是了。<br><br>  細講一下打靶，<br><br>  我們在第一階段是打T91，鑑測的時候是打175公尺，<br><br>  鑑測之前都會給你充分的練習機會，<br><br>  也都會報靶讓你知道自己打得怎樣。<br><br>  第二階段以後打的也是T91步槍，不過這時候就不用鑑測，<br><br>  班長都睜一隻眼閉一隻眼，大家有打就好。<br><br>  在第二階段的操課也一樣，<br><br>  因為不用鑑測，所以基本上沒在操課(有押韻 哈哈)<br><br>  大部分都在跟班長還有鄰兵聊天…<br><br>  這時候建議你帶本書去看，免得你無聊的不知道要幹嘛。</p><h2 id="8-鑑測"><a href="#8-鑑測" class="headerlink" title="8. 鑑測"></a>8. 鑑測<br></h2><p>  除了放假以外，這大概是最重要的一件事，<br><br>  鑑測分成三天半，第一天禮拜四的下午是學科測驗，<br><br>  是很智障的選擇題，班長在前一個禮拜就會把題目還有答案發給你(這可以說嗎)<br><br>  你就看一看就妥當了。<br><br>  第二天一大早是3000公尺，平常時候早上就有跑步時間，<br><br>  當天在跑的時候也是讓班長跟跑比較慢的領跑，<br><br>  會跑的就到後面跟上就好。<br><br>  整路的四個轉角還有其他人噴水降溫，<br><br>  再加上腎上腺素的激化，大概95%的人都會跑完。<br><br>  下午是打靶跟機械訓練，<br><br>  打靶就像之前提過的就是靠平常訓練的成果了，<br><br>  機械訓練就是把槍拆開來再組回去，<br><br>  這也會讓你練習過N次，所以這部分還滿簡單的。<br><br>  禮拜六的一早是刺槍術，除了天氣真的很熱以外，<br><br>  只要刺一次就可以收工，然後就可以回去休息了，<br><br>  平常訓練還辛苦一點。<br><br>  然後下午是單兵戰鬥教練，<br>  就是要穿上迷彩衣、插滿草、臉上用炭粉塗的黑黑的，<br>  在一片草地上做單兵戰鬥教練。<br><br>  單兵戰鬥教練的報告詞在入伍那天就會發給你，<br><br>  平常上課的時候班長也會威脅你要背，<br><br>  我們連上背了也可以加自己的內務分數，可以爭取榮譽假云云；<br><br>  可是我個人是沒有背啦(這也可以說嗎)<br>  都靠其他同梯的carry，反正大多也都是混一下就過了。<br>  禮拜天只有早上要考伏地挺身跟仰臥起坐而已，<br>  而且是你同連的人幫你算你做了幾下，<br>  所以趁鑑測官不注意灌一點水是很正常的(講這麼多是會不會被查水表)<br>  不過像我們這營遇到一個比較嚴格的鑑測官，<br>  日子就不好過了…<br>  但是，還是要告訴大家，在你看這篇文章的同時，<br>  你已經是個合格的步槍兵了。<br><br>  你已經是個合格的步槍兵了。<br><br>  你已經是個合格的步槍兵了。<br><br>  哈哈哈<br>  (講到這裡還要不自殺宣言嗎)</p><h2 id="9-總結"><a href="#9-總結" class="headerlink" title="9. 總結"></a>9. 總結<br></h2><p>   兩個月的時間其實很快就過去了，<br><br>   當去交朋友、放空腦袋其實也不錯<br><br>   重要的是自己的心態要調整，拋開自己在外面的一切，<br><br>   接受部隊裡就是一個無聊、浪費時間、無腦又沒用的世界，<br><br>   套一句班長講的:<br><br>   <strong>大家都是義務役。</strong><br><br>  最後感謝大家好好看完，如果覺得很廢好像也滿正常的，<br><br>  因為真的很廢啊!!!<br><br>  希望這篇文章有幫助到學弟們。<br></p><h1 id="最後的最後"><a href="#最後的最後" class="headerlink" title="最後的最後"></a>最後的最後</h1><p>  最後我想用一句話當總結:</p><blockquote><p>如果有人想用一百萬買我入伍的回憶，我絕對不賣；<br>   但是如果有人用一百萬叫我再入一次伍，我絕對不要。<br><br>  – <cite>麥克阿瑟</cite></p></blockquote><p>  大概是這種改覺吧～</p>]]></content>
      
      
      <categories>
          
          <category> 心情紀錄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 紀錄 </tag>
            
            <tag> 退伍 </tag>
            
            <tag> 當兵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt storyblok</title>
      <link href="/2018/07/15/Nuxt-storyblok/"/>
      <url>/2018/07/15/Nuxt-storyblok/</url>
      
        <content type="html"><![CDATA[<h1 id="Nuxt-amp-storyblok"><a href="#Nuxt-amp-storyblok" class="headerlink" title="Nuxt &amp; storyblok"></a>Nuxt &amp; storyblok</h1><p>通常碰到不會的新技術都會找個東西來實做看看，從過程中來了解他。</p><p>在過程中發現了這東西<a href="https://www.storyblok.com/">storyblok</a>他可以管理你的內容，像是內容管理裝置的東西，這樣如果跟nuxt連動就可以完成內容發布的blog了。</p><h1 id="blog初始樣貌"><a href="#blog初始樣貌" class="headerlink" title="blog初始樣貌"></a>blog初始樣貌</h1><p>先至 <a href="https://github.com/nuxt-community/create-nuxt-app">nuxt</a>了解install方法</p><p><code>npx create-nuxt-app &lt;my-project&gt;</code>創建專案</p><p>創建過過程有一些選項看自己選哲是否需要。</p><p>接下來介紹整個會用到的資料夾<code>components</code> <code>layouts</code> <code>pages</code> </p><h2 id="1-components"><a href="#1-components" class="headerlink" title="1. components"></a>1. components</h2><p>就是原本uve的components 的概念，把你寫的components都放在這需要引用再用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XXX <span class="keyword">from</span> <span class="string">&#x27;@/components/XXX/&#x27;</span></span><br></pre></td></tr></table></figure><p>就可以引用了 prop用法也跟vue一樣</p><h2 id="2-layouts"><a href="#2-layouts" class="headerlink" title="2. layouts"></a>2. layouts</h2><p>這裡的layouts 有點像vue的App.vue的概念 它包含了整個基底與Vue 實俐，virtual DOM….等(<a href="https://cythilya.github.io/2017/04/11/vue-instance/">詳細可參考這裡</a>)</p><p>在layout可以做一些像是headbar或是footer的東西不會在虛擬路由中重複一直載入</p><h2 id="3-pages"><a href="#3-pages" class="headerlink" title="3. pages"></a>3. pages</h2><p>vue 在實作虛擬路由需要搭踏一個components而在這直接新增<code>x.vue</code>在PAGES資料夾中就是一個頁面+路由把他從components中分離出來。</p><p>若名稱前面加上<code>_</code>就可以以動態路由的方式被宣告。</p><h2 id="4-blog雛形"><a href="#4-blog雛形" class="headerlink" title="4. blog雛形"></a>4. blog雛形</h2><p>怎麼打造每個人由不同見解與方法。</p><p><a href="https://github.com/dandanXO/Fisrt_Nuxt_storyblok">這裡</a>是我的github可以參考。</p><h1 id="如何搭配storyblok-做管理"><a href="#如何搭配storyblok-做管理" class="headerlink" title="如何搭配storyblok 做管理"></a>如何搭配storyblok 做管理</h1><blockquote><h1 id="To-be-continued…"><a href="#To-be-continued…" class="headerlink" title="To be continued…"></a>To be continued…</h1></blockquote>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> first </tag>
            
            <tag> vue.js </tag>
            
            <tag> nuxt </tag>
            
            <tag> node.Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Interview</title>
      <link href="/2018/05/06/FirstInterview/"/>
      <url>/2018/05/06/FirstInterview/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安，一如往常的聊天開頭。想說等所有面試一結束就寫文章，發現太忙(<STRIKE>其實是懶的打</STRIKE>)就拖到現在。</p><p>我自己滿喜歡看的文章大致分成兩類，一種是分享軟硬體技術，例如教你如何使用golang從頭到尾實作出<code>Web Server</code>等<br>，另一種則是像心得文章例如<a href="http://jaceju.net/2016-12-24-be-a-senior-engineer/">接近 2016 年底的我是否有資格稱為資深工程師</a>這種文章，自我審視等。</p><h2 id="先說小結論"><a href="#先說小結論" class="headerlink" title="先說小結論"></a>先說小結論</h2><p> 有找到一家願意以實習方式用我的公司</p><h1 id="個人介紹"><a href="#個人介紹" class="headerlink" title="個人介紹"></a>個人介紹</h1><p>國立科大學士即將畢業，這4年有作一些前端後端(全端?)<a href="https://github.com/dandanXO">作品</a>，手機APP等。</p><p>熟練的語言/工具</p><ul><li>java </li><li>javascript (vue, node, ES5/6/7 (大致規範))</li><li>html css</li><li>github/git</li></ul><p>摸過皮毛語言/工具</p><ul><li>php</li><li>C#</li><li>docker</li><li>CI/CD 僅流程與想法</li><li>aws</li><li>azure</li></ul><p>由於沒畢業(2018/6/30才可畢業)，所以去面試基本上心態都是去當吸收經驗，這4個月面了5家公司，在面試時我就意識到了所謂即戰力，以一個剛出社會的學士根本不可能到達那個門檻或甚至是超越，因為會發現面試問題除了基本考題都會參情境問題提出解決方案，在校園接觸機會極少…真的很尷尬。</p><h1 id="面試開始"><a href="#面試開始" class="headerlink" title="面試開始"></a>面試開始</h1><h2 id="尋找職位與公司方向"><a href="#尋找職位與公司方向" class="headerlink" title="尋找職位與公司方向"></a>尋找職位與公司方向</h2><ul><li>新創 </li><li>小公司</li><li>地點不重要</li><li>前端</li><li>後端</li></ul><h2 id="宇清數位"><a href="#宇清數位" class="headerlink" title="宇清數位"></a>宇清數位</h2><p><strong>軟體工程師</strong></p><p>這是104主動邀約的，我記得我把104履歷自傳填完過幾天就來了, 想說反正出生之犢不畏虎，就直接答應了。</p><p>也算惱衝吧，我記得那是第一次去換證件的辦公大樓，還不知道流程弄了快20分鐘才換好證件上樓。這家公司在竹科附近(不在裡面)醫道他們會議室第一面就總經理來面試，他大概也知道我還沒畢業，所以就以聊天方式面試了(我心裡OS應該是要找時可上工的大概沒機會了)，一開始就直接講要找前端並使用vue完成公司的產品的UI(web base), 順便介紹公司是做產線效率優化的系統廠，使用數據進行智能生產的軟體接案開發公司，人數大約20-25人小型公司。</p><p>面試大致分成</p><ul><li>自我介紹</li><li>問題/考題</li><li>公司介紹</li><li>期望薪資/我出問題</li></ul><p>過程中有問到vue的開發方式，vuex的4個狀態，你要怎麼解釋vue是甚麼諸如此類…整個有被洗臉的感覺XD</p><p>談到最後依然會問對公司有甚麼問題與期望薪資。這兩樣基本上每家公司都會問講出你心裡的答案與想知道的就好了。</p><blockquote><h2 id="結果-無聲卡"><a href="#結果-無聲卡" class="headerlink" title="結果: 無聲卡"></a>結果: 無聲卡</h2></blockquote><h2 id="雲端達人科技股份有限公司"><a href="#雲端達人科技股份有限公司" class="headerlink" title="雲端達人科技股份有限公司"></a>雲端達人科技股份有限公司</h2><p><strong>軟體工程師</strong></p><p>一樣104主動邀約，這家的印象讓我不是很好，是在台北市某辦公大樓中，一面試就問是否接受駐點與加班，開始介紹他們是專門的接案公司，感覺起來是很缺人。<br>然後問一下JAVA基本觀念就結束面試了直接發給我名片說當完兵可以連絡我，我當一臉黑人問號(到底多缺肝??)<br>這整個過程大概30分鐘而已，說起來有點詭異，不過就當一次經驗吧。</p><blockquote><h2 id="結果-發名片"><a href="#結果-發名片" class="headerlink" title="結果: 發名片"></a>結果: 發名片</h2></blockquote><h2 id="有無科技股份有限公司"><a href="#有無科技股份有限公司" class="headerlink" title="有無科技股份有限公司"></a>有無科技股份有限公司</h2><p><strong>Junior backend developer</strong></p><p>這家公司在台北101附近，信義大樓裡面整個氣派到不行。</p><p>面試開始就給60-90分鐘寫題目，寫白板題目我是有先心理準備，不過在紙上寫15題code真的超累，還好之前有刷leetcode還可以應付過去。<br>題目已經忘了差不多，很多都是JS經典考題題目刷一下應該沒問題。</p><p>寫完考券與填完表格，面試的是一位內部工程師，聊一下公司環境與公司產品，他說他們原先是做社區型的外送APP想擴展服務，讓更多人使用有點像<a href="https://www.foodpanda.com.tw/">foodpanda</a>的概念。</p><p>也順便聊了一下目前台灣新創公司的窘境，台灣新創100%都在燒錢拿輔助與投資發展新服務項目過活，像他們就在信義集團底下才有<code>$$</code>燒，最大的敵人是<a href="https://www.ubereats-tw.com/">uber eats</a>，因為人家資金很多。</p><p>這家的技術問題就比較困難問了:</p><ul><li>橫向擴展/縱向擴展使用時機與比較</li><li>大數據分析 tensorflow 資料探勘的概念</li><li>sql/nonsql 比較與優缺點</li><li>javascirpt es6/7 promise async/await</li><li>想投入的產業</li><li>當完兵沒(聽到這題代表我已死XD)</li></ul><p>經過上面的面試大概2小時多，最後面試官說等第二次面試通知，出來的時候已經中午就到對面101隨便吃吃混混，下午就發感謝函來沒有第二次面試，不過還滿有效率不讓面試者等太久XD。</p><blockquote><h2 id="結果-感謝函-無第二次面試"><a href="#結果-感謝函-無第二次面試" class="headerlink" title="結果: 感謝函 無第二次面試"></a>結果: 感謝函 無第二次面試</h2></blockquote><h2 id="果子云數位科技有限公司"><a href="#果子云數位科技有限公司" class="headerlink" title="果子云數位科技有限公司"></a>果子云數位科技有限公司</h2><p><strong>前端程式設計師</strong></p><p>算是竄升很快的新創(應該不算)，在高雄的面試只有小小的辦公室面試官是一位資深技術PM，他們公司主要是做國外博弈軟體開發，與國內界案為主背後資金應該也是很雄厚，另外他有提到上班不用打卡可以完全<code>remote work</code>，應該所謂責任制吧XD</p><p>聊到還沒當兵，直接說當完打給我就可以了(offer get?)，有點像是去聊天又不太像。全程大概60分鐘就結束了。頗快的。</p><blockquote><h2 id="結果-發名片-1"><a href="#結果-發名片-1" class="headerlink" title="結果: 發名片"></a>結果: 發名片</h2></blockquote><h2 id="實習get的公司就不說名字了"><a href="#實習get的公司就不說名字了" class="headerlink" title="實習get的公司就不說名字了"></a>實習get的公司就不說名字了</h2><p>這間公司在台中，是做聊天機器人和使用者對話收集與分析的公新創。</p><p>第一次面試是視訊面試，超緊張的。</p><p>面試問題很用心會去看你的<code>gitbub</code>從其中問問題與實作方式，在人格特質方面也問了很多像是co-work和5年後想成為怎麼樣的人…等，考了一些JS的經典問題同步非同步for loop 問題當場remote作答…等。整個過程大概2小時多都看者視訊鏡頭身心疲憊。</p><p>最後，出了一題FB爬蟲回家作業決定使否取用，那時既興奮又害怕。雖然最後有做出來並實習get，但感覺自己沒有說做得很好。還滿有趣的經驗。</p><blockquote><h2 id="結果-實習get"><a href="#結果-實習get" class="headerlink" title="結果: 實習get"></a>結果: 實習get</h2></blockquote><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>在這些面是中間有去日本玩7-8天，高雄KKBOX有打電話來問我要不要去面試不過要去日本我竟然拒絕了!!</p><p>現在想想，我也滿大膽的XD</p><p>其中有滿多問後續職涯規劃，說真的很難回答，人生也不是只有寫成是對吧?</p><p>我也不是那種被問到「你喜歡寫程式嗎」會毫不遲疑給答案的人寫程式這件事的確有它的魅力在，可以訓練邏輯、可以開發實用的工具解決問題、可以在咖啡廳像駭客一樣工作就是潮，儘管學習期常常會有很沈悶與自我懷疑的時候，但就是不斷嘗試各種自己有興趣的方向去切入，至少有個開始，每天都比昨天的自己多會一些。</p><p>最後，從這一階段面試發現找工作上沒當完兵基本沒戲唱，除非強到頂天的等級，超越即戰力門檻很多不然只能多試與碰碰運氣了。</p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise To async/await</title>
      <link href="/2018/05/03/promiseToasync-await/"/>
      <url>/2018/05/03/promiseToasync-await/</url>
      
        <content type="html"><![CDATA[<h1 id="告別-Promise-迎接-Async-Await"><a href="#告別-Promise-迎接-Async-Await" class="headerlink" title="告別 Promise 迎接 Async/Await"></a>告別 Promise 迎接 Async/Await</h1><figure class="image-box">                <img src="https://i.imgur.com/zPVnZkK.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h1 id="先說-promise"><a href="#先說-promise" class="headerlink" title="先說 promise"></a>先說 promise</h1><p>在很久以前，那是個 JavaScript callback hell 的年代，為了處理這種處境，有人提出了 Promise 的寫法。而 Promise 也是近年開發 JavaScript 程式不可或缺的一門基礎，在 ES2015 也將 Promise 納為其中的一項標準。</p><h1 id="非同步-function"><a href="#非同步-function" class="headerlink" title="非同步 function"></a>非同步 function</h1><p>關於非同步的文章網路上已經很多了，就不在此贅述。在這裡我直接先以 Promise 實作一個簡易的非同步程式：</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchCat</span> (<span class="params">userId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">`https://catappapi.herokuapp.com/users/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> respone.json())</span><br><span class="line">        .then(<span class="function"><span class="params">data</span> =&gt;</span> data.imageUrl)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fetchCat (<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">//http://images.somecdn.com/user-123.jpg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如果是-Async-Await？"><a href="#如果是-Async-Await？" class="headerlink" title="如果是 Async/Await？"></a>如果是 Async/Await？</h2><p>換成 Async/Await 的話，就不必寫下 .then() 了！就像同步的程式一般，不必理會它是否為非同步。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCat</span> (<span class="params">userId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">`https://catappapi.herokuapp.com/users/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.json()</span><br><span class="line">    <span class="keyword">return</span> data.imageUrl</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fetchCat (<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">//http://images.somecdn.com/user-123.jpg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>宣告在 <code>function fetchCat</code> 的 async 表示該 function 是個非同步的。而在 function 內 response與data 之前的 await 表示要等待這個非同步的結果回傳後才會繼續執行，也就是說這個 function 內的程式都變為同步了！</p><h1 id="進階點"><a href="#進階點" class="headerlink" title="進階點"></a>進階點</h1><p>先看這句話</p><blockquote><p>Inside a function marked as asucn, you are allowed to place the await keyword in front of an expression taht returns a prmise. When you do, the execution of the async function is paused until the promise is resoled.</p><p>– <cite>MPJ</cite></p></blockquote><p>會發現其實Async/Await 是基於 promise 所完成的。</p><h2 id="連續-then-改成-Async-Await"><a href="#連續-then-改成-Async-Await" class="headerlink" title="連續.then() 改成 Async/Await"></a>連續.then() 改成 Async/Await</h2><h3 id="promise-1"><a href="#promise-1" class="headerlink" title="promise"></a>promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchCat</span> (<span class="params">userId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">`https://catappapi.herokuapp.com/users/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> respone.json())</span><br><span class="line">        .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> promises = user.cats.map(<span class="function"><span class="params">catId</span> =&gt;</span> </span><br><span class="line">                fetch(<span class="string">`https://catappapi.herokuapp.com/cats/<span class="subst">$&#123;catId&#125;</span>`</span>)</span><br><span class="line">                    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">                    .then(<span class="function"><span class="params">catData</span> =&gt;</span> catData.imageUrl)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fetchCat (<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">//&#x27;http://images.somecdn.com/cat-21.jpg&#x27;, &#x27;http://images.somecdn.com/cat-33.jpg&#x27;, http://images.somecdn.com/cat-45.jpg</span></span><br></pre></td></tr></table></figure><h3 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCat</span> (<span class="params">userId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">`https://catappapi.herokuapp.com/users/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> user = resp.json()</span><br><span class="line">    <span class="keyword">const</span> catImageUrls =[]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> catId <span class="keyword">of</span> user.cats)&#123;</span><br><span class="line">        <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">`https://catappapi.herokuapp.com/cats/<span class="subst">$&#123;catId&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">const</span> catData = <span class="keyword">await</span> resp.json()</span><br><span class="line">        catImageUrls.push(catData.umageUrl)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> catImageUrls</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fetchCat (<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">//&#x27;http://images.somecdn.com/cat-21.jpg&#x27;, &#x27;http://images.somecdn.com/cat-33.jpg&#x27;, http://images.somecdn.com/cat-45.jpg</span></span><br></pre></td></tr></table></figure><p>如果這樣你覺得不夠簡潔可以搭配 <code>Promise.all</code>做出<code>reurn</code>更簡潔的寫法取帶同步迴圈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCat</span> (<span class="params">userId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">`https://catappapi.herokuapp.com/users/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> user = resp.json()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all(user.cats.map(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">catId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">`https://catappapi.herokuapp.com/cats/<span class="subst">$&#123;catId&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">const</span> catData = <span class="keyword">await</span> resp.json()</span><br><span class="line">        <span class="keyword">return</span> catData.imageUrl</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fetchCat (<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">//&#x27;http://images.somecdn.com/cat-21.jpg&#x27;, &#x27;http://images.somecdn.com/cat-33.jpg&#x27;, http://images.somecdn.com/cat-45.jpg</span></span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>async/await 的貢獻在語法上為 Javascripte 進行大優化，原本執行多行 Promises 程式簡化成一行，不僅僅提高程式的可讀性，也是為 functional programming 量身訂造的設計。</p><hr>- PS 缺少 `` Error handle`` 待補]]></content>
      
      
      <categories>
          
          <category> async/await </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
            <tag> Promise </tag>
            
            <tag> express </tag>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fb clwaer</title>
      <link href="/2018/03/17/fb-clwaer/"/>
      <url>/2018/03/17/fb-clwaer/</url>
      
        <content type="html"><![CDATA[<h1 id="Facebook-api-粉絲頁爬蟲"><a href="#Facebook-api-粉絲頁爬蟲" class="headerlink" title="Facebook api 粉絲頁爬蟲"></a>Facebook api 粉絲頁爬蟲</h1><p>這是一次面試的題目要做出網頁的爬蟲﹐我想說如果用別人提供的api也算是爬蟲吧?</p><p>沒想到也可以讓我興奮不已的。</p><h2 id="構想"><a href="#構想" class="headerlink" title="構想"></a>構想</h2><p>自己有一個後端與前端﹐前端負責顯示與使用者的參數帶入置後端﹐而後端則是接收條件參數並控制邏輯與facebook api取資料。</p><p>大概就像這張圖一樣:</p><figure class="image-box">                <img src="https://i.imgur.com/Tyqiex0.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>少掉的地訪就只是登入驗證而已，因為都已經是公開資料了就不必要登入了。</p><h2 id="部分講解與成品"><a href="#部分講解與成品" class="headerlink" title="部分講解與成品"></a>部分講解與成品</h2><p>後端有使用nodejs 的 expressjs 框架</p><p>主要的部分是<a href="https://www.npmjs.com/package/fb">npm fb 模組</a></p><p>再搭配 <a href="https://developers.facebook.com/tools/explorer/145634995501895/">graph api</a>做測試與取得<a href="http://goodjack.blogspot.tw/2017/08/how-to-get-facebook-permanent-page-access-token.html">永久token方法</a></p><p><a href="http://www.dandan.tw/">preview</a></p><p><a href="https://github.com/dandanXO/FB_crawler">github code</a></p>]]></content>
      
      
      <categories>
          
          <category> clwaer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
            <tag> web clwaer </tag>
            
            <tag> facebook pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT 使用筆記</title>
      <link href="/2018/02/11/git/"/>
      <url>/2018/02/11/git/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT-基本筆記"><a href="#GIT-基本筆記" class="headerlink" title="GIT 基本筆記"></a>GIT 基本筆記</h1><h2 id="1-進入暫存區-ADD-、提交版本-COMMIT"><a href="#1-進入暫存區-ADD-、提交版本-COMMIT" class="headerlink" title="1. 進入暫存區(ADD)、提交版本(COMMIT)"></a>1. 進入暫存區(ADD)、提交版本(COMMIT)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git clone   </span><br><span class="line">clone下來別人的專案到local端</span><br><span class="line"> </span><br><span class="line">git init  </span><br><span class="line">創建一個新的Repository (打開任何一個專案資料夾打上git init)</span><br><span class="line"> </span><br><span class="line">add add 主檔名.副檔名   </span><br><span class="line">將檔案提交入Staging Areagit add 整個資料夾提交入Staging Area </span><br><span class="line"> </span><br><span class="line">git commit -m &#x27;一行解說文字&#x27;  </span><br><span class="line">將檔案提交入Repository git commit -e 能用編輯器撰寫多行解說文字</span><br><span class="line"> </span><br><span class="line">git rm --cached 檔案名稱 </span><br><span class="line">將不在Repository的檔案移出Staging Area</span><br><span class="line"> </span><br><span class="line">git reset HEAD </span><br><span class="line">將已經在Repository的檔案移出Staging Area</span><br><span class="line"> </span><br><span class="line">git status</span><br><span class="line">查看目前檔案的狀態</span><br><span class="line"> </span><br><span class="line">git log</span><br><span class="line">查看目前所有commit的歷史紀錄</span><br></pre></td></tr></table></figure><p><em>如果已經被加入repository過的檔案，絕對不行用git rm –cached，因為這行指令是把檔案從Repository中幹掉：</em></p><ol><li>若檔案不在Repository內 : git rm –cached幫我們從stage刪除，且檔案本來就是untracked，執行完還是untracked，還在預期之內。</li><li>若檔案已經在repository內 : git rm –cached會幫我們從repository刪除，並且從stage刪除，因為已經從repository刪除檔案，檔案會從tracked變成untracked。</li></ol><p>因此要移除Staing Area中的檔案，我們必須根據檔案狀態採用不同的指令： __</p><ol><li>若該檔案不在repository內 : git rm –cached 檔案名稱</li><li>若檔案已經在repository內 : git reset HEAD 檔案名稱</li></ol><h2 id="2-查看目前狀態的常用指令-DIFF-LOG-SHOW"><a href="#2-查看目前狀態的常用指令-DIFF-LOG-SHOW" class="headerlink" title="2. 查看目前狀態的常用指令 (DIFF, LOG, SHOW)"></a>2. 查看目前狀態的常用指令 (DIFF, LOG, SHOW)</h2><h3 id="從Git命令列鍵入git-diff就可以看到修改過後的紀錄。"><a href="#從Git命令列鍵入git-diff就可以看到修改過後的紀錄。" class="headerlink" title="從Git命令列鍵入git diff就可以看到修改過後的紀錄。"></a>從Git命令列鍵入git diff就可以看到修改過後的紀錄。</h3><figure class="highlight plaintext"><figcaption><span>git diff</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/hello.txt b/hello.txt</span><br><span class="line">index e69de29..1029def 100644</span><br><span class="line">--- a/hello.txt</span><br><span class="line">+++ b/hello.txt</span><br><span class="line">@@ -0,0 +1,2 @@</span><br><span class="line">+print (&#x27;hello world&#x27;)^M</span><br><span class="line">+print (&#x27;I wanna fly&#x27;)</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h3 id="要怎麼知道每一項commit確切到底改了什麼"><a href="#要怎麼知道每一項commit確切到底改了什麼" class="headerlink" title="要怎麼知道每一項commit確切到底改了什麼"></a>要怎麼知道每一項commit確切到底改了什麼</h3><p>git show來查看某項特定commit的修改內容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 8a85094b22edf4184e7228c3f849807dd7eed2c9</span><br><span class="line">Author: Lynn19931205 </span><br><span class="line">Date:   Wed Sep 7 19:07:21 2016 +0800</span><br><span class="line"> </span><br><span class="line">    Add new line I wanna fly</span><br><span class="line"> </span><br><span class="line">commit 0dc97a8057e1f30139729ce2316f5be966a65ef2</span><br><span class="line">Author: Lynn19931205 </span><br><span class="line">Date:   Wed Sep 7 18:32:32 2016 +0800</span><br><span class="line"> </span><br><span class="line">    Add a line.</span><br></pre></td></tr></table></figure><p>然後我們把上面第一欄的commit代碼複製起來 (複製六碼或以上)後輸入在git show後面，就會顯示該次詳細的修改內容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git show 8a8509</span><br><span class="line">commit 8a85094b22edf4184e7228c3f849807dd7eed2c9</span><br><span class="line">Author: Lynn19931205 </span><br><span class="line">Date:   Wed Sep 7 19:07:21 2016 +0800</span><br><span class="line"> </span><br><span class="line">    Add new line I wanna fly</span><br><span class="line">diff --git a/hello.txt b/hello.txtindex e69de29..1029def 100644--- a/hello.txt+++ b/hello.t</span><br></pre></td></tr></table></figure><p>在git diff後面輸入commit代碼，也可以比較兩次commit間修改的差異:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff 8a8509 0dc97a</span><br><span class="line">diff --git a/hello.txt b/hello.txt</span><br><span class="line">index 1029def..e69de29 100644</span><br><span class="line">--- a/hello.txt</span><br><span class="line">+++ b/hello.txt</span><br><span class="line">@@ -1,2 +0,0 @@</span><br><span class="line">-print (&#x27;hello world&#x27;)</span><br><span class="line">-print (&#x27;I wanna fly&#x27;)</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git log </span><br><span class="line">列出所有commit的歷史紀錄</span><br><span class="line"> </span><br><span class="line">git diff </span><br><span class="line">比較文件或commit間修改的差異</span><br><span class="line"> </span><br><span class="line">git show </span><br><span class="line">詳細列出該次commit的修改內容</span><br><span class="line"> </span><br><span class="line">git status </span><br><span class="line">列出目前的檔案狀態</span><br></pre></td></tr></table></figure><h1 id="3-推送程式碼至REMOTE端-PUSH-PULL"><a href="#3-推送程式碼至REMOTE端-PUSH-PULL" class="headerlink" title="3. 推送程式碼至REMOTE端 (PUSH/PULL)"></a>3. 推送程式碼至REMOTE端 (PUSH/PULL)</h1><p>在GitHub上創建一個和本地端名稱相同的資料夾，專案描述可寫可不寫、權限設為開放、README不用勾選，最後按下 ：</p><figure class="image-box">                <img src="https://i.imgur.com/bw1tFiX.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>將hello.txt檔案打開，在Remote端的第三行加入一排的驚嘆號「!!!!!!」、再打開Local端加入一排的問號「?????」。</p><figure class="image-box">                <img src="https://i.imgur.com/5jY9uwe.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>接下來一樣透過和git commit -m，將Local端的程式碼送進Repository。有趣的來了，當我們將輸入 git pull 將程式碼從Remote端拉下來到Local端這邊時：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> git pull</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From https://github.com/Lynn19931205/project_1</span><br><span class="line">   260b7de..957b721  master     -&gt; origin/master</span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>Git表示：你們有一些衝突(conflicts)，待解決完我才會幫你們成功把Remote端的東西融合到Local端這邊噢。先來打開Local端的hello.txt檔案：</p><figure class="image-box">                <img src="https://i.imgur.com/rIMxLem.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>最後再一次git commit、git add，最後用git push將目前這個版本「推送」到Remote端 (一樣須輸入GitHub帳號密碼)。</p><p>這時回到GitHub網站重新整理，可以發現…Remote端的程式碼從驚嘆號變成最新修改完成的問號了！</p><h1 id="4-切換-CHECKOUT-開分支-BRANCH-與融合-MERGE"><a href="#4-切換-CHECKOUT-開分支-BRANCH-與融合-MERGE" class="headerlink" title="4. 切換(CHECKOUT), 開分支(BRANCH)與融合(MERGE)"></a>4. 切換(CHECKOUT), 開分支(BRANCH)與融合(MERGE)</h1><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><p>Git作為分散式版本管理系統的好處是不需仰賴中央單一一條主幹道開發，可根據開發需求、隨時在某一時間點開分支(branch)獨立開發某一項功能，待開發完成後再融合(merge)回去主幹道。</p><p>概念圖:</p><figure class="image-box">                <img src="https://i.imgur.com/uIJvSBk.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>主幹(master)與分支(branch)是稱呼專案的主要版本和分支版本。在Git第一個建立的專案版本會被稱為master版本。</p><p>然而實際上master也僅是其中一條branch，所有branch間的關係都是平等的、彼此間無主從關係。一般習慣將穩定版本稱主幹，其餘的變動、開發中版本則都稱作分支。</p><p>開branch的方式非常簡單，直接輸入git branch 即可。<br><code>git branch branch_a</code></p><p>是意圖:</p><figure class="image-box">                <img src="https://i.imgur.com/qG3EX6X.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>目前master幹道上有五個commit的版本；若沒有指定要回溯至哪一個歷史版本，branch就會採用最新一次commit的版本。 但若我們想切到某一個commit版本開一條branch時</p><figure class="image-box">                <img src="https://i.imgur.com/V7zjHi9.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>我們可以先輸入git log查看所有commit的歷史紀錄：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">git log </span><br><span class="line">commit 372466ead9e54fd3a464cb85d78cd5304f335bc4 Merge: 6183031 957b721 </span><br><span class="line"> Author: Lynn19931205  </span><br><span class="line"> Date: Wed Sep 7 23:35:26 2016 +0800 </span><br><span class="line"> </span><br><span class="line">   Final Edit   </span><br><span class="line"> </span><br><span class="line">commit 957b721541d834fb7a71157f0401bdd013ea6e08</span><br><span class="line"> Author: Lynn </span><br><span class="line"> Date: Wed Sep 7 23:23:16 2016 +0800 </span><br><span class="line"> </span><br><span class="line">   Update hello.txt </span><br><span class="line"> </span><br><span class="line">commit adb3238e29668c95130c1e6e82b5bab3faef5489</span><br><span class="line"> Author: Lynn19931205 </span><br><span class="line"> Date: Wed Sep 7 20:30:07 2016 +0800 </span><br><span class="line"> </span><br><span class="line">   Add a if statement </span><br><span class="line"> </span><br><span class="line">commit 8a85094b22edf4184e7228c3f849807dd7eed2c9</span><br><span class="line"> Author: Lynn19931205 </span><br><span class="line"> Date: Wed Sep 7 19:07:21 2016 +0800 </span><br><span class="line"> </span><br><span class="line">   Add new line I wanna fly </span><br><span class="line"> </span><br><span class="line">commit 0dc97a8057e1f30139729ce2316f5be966a65ef2</span><br><span class="line"> Author: Lynn19931205 </span><br><span class="line"> Date: Wed Sep 7 18:32:32 2016 +0800 </span><br><span class="line"> </span><br><span class="line">   Add a line.</span><br></pre></td></tr></table></figure><p>選好回溯的時間點後使用 <code>git checkout</code> (checkout後面輸入commit代碼至少6碼)；待checkout過去之後，就可以開一條branch了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout adb3238</span><br><span class="line"> </span><br><span class="line">$ git branch branch_a</span><br></pre></td></tr></table></figure><p>但這邊我們只是先建立了一個branch噢，實際上我們人還待在master這條幹道上。</p><p>因此我們必須利用checkout的另外一個功能、也就是切換各條branch的功能! (別忘了master也只是其中一條branch)。輸入git checkout ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git  ckeckout branch_a</span><br><span class="line">Switched to branch &#x27;branch_a&#x27;</span><br></pre></td></tr></table></figure><p>輸入git branch -a可以查看目前我們開的所有branch：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a      </span><br><span class="line">branch_a* master  remotes/origin/master</span><br></pre></td></tr></table></figure><p>輸入git branch -a可以查看目前我們開的所有branch(*代表當前所在位置)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a      </span><br><span class="line">branch_a* master  remotes/origin/master</span><br><span class="line">$ git branch -a      </span><br><span class="line">branch_a* master  remotes/origin/master</span><br></pre></td></tr></table></figure><p>當我們不想要這條branch時，可以用git branch -d 刪除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d branch_a</span><br></pre></td></tr></table></figure><h2 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h2><p> 首先必須利用checkout回到想要merge過去的主幹道上；比如在此例中我們用git checkout回到master線上之後，再輸入要merge過去的branch名稱git merge 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master </span><br><span class="line">Switched to branch &#x27;master&#x27; </span><br><span class="line"> </span><br><span class="line">$ git merge branch_a</span><br></pre></td></tr></table></figure><h1 id="進階-Git-reset-取消上一次的操作"><a href="#進階-Git-reset-取消上一次的操作" class="headerlink" title="進階 Git reset 取消上一次的操作"></a>進階 Git reset 取消上一次的操作</h1><h2 id="取消-merge"><a href="#取消-merge" class="headerlink" title="取消 merge"></a>取消 merge</h2><p>版本控制最大的好處之一就是讓你永遠可以後悔，因此我們常會希望把已暫存的檔案、已提交的 commit 或是已合併的 branch 取消修改，這時候我們可以使用 <code>git reset</code> 這個指令來幫助我們，像現在我若是想要取消剛剛的 merge 動作，我只要下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard ORIG_HEAD</span><br><span class="line">HEAD is now at c126ff9 Config initialze</span><br></pre></td></tr></table></figure><h2 id="取消已暫存的檔案"><a href="#取消已暫存的檔案" class="headerlink" title="取消已暫存的檔案"></a>取消已暫存的檔案</h2><p>有時候手殘不小心將還沒修改完的檔案使用 <code>git add</code>加入了 <code>stage</code> ，這時候可以使用 <code>git reset HEAD &lt;file&gt;</code> 來將這支檔案取消 stage：</p><figure class="image-box">                <img src="https://i.imgur.com/Cv42Atm.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>你可以看到我使用 <code>git add</code> 將檔案加入 stage 後，在我的 status 狀態顯示 lib/cat.rb 這支檔案現在已經準備好被 commit ，但這時我使用了 <code>git reset HEAD</code> 將這支檔案取消 stage，再使用 status 查看時它就變回一支還沒加入 stage 的檔案了。</p><h2 id="取消修改過的檔案"><a href="#取消修改過的檔案" class="headerlink" title="取消修改過的檔案"></a>取消修改過的檔案</h2><p>連續剛剛的情況，若是我想完全放棄這次修改 (將檔案狀態回復到最新的一次 commit 時的狀態)，我可以使用 <code>git checkout -- &lt;file&gt;</code> 來回復這支檔案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- lib/cat.rb</span><br><span class="line">取消變更不會有任何訊息，但這時你去看檔案會發現他已經回復成沒修改過時的模樣了。</span><br></pre></td></tr></table></figure><h2 id="修改上一次的commit"><a href="#修改上一次的commit" class="headerlink" title="修改上一次的commit"></a>修改上一次的commit</h2><p>手誤打太快， commit 訊息打錯時，我們可以使用 git commit –amend 來幫助我們重新修改：</p><figure class="image-box">                <img src="https://i.imgur.com/a43BX1h.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure>.<figure class="image-box">                <img src="https://i.imgur.com/m8F0w9k.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>在上面我想要修改打錯字的 commit 訊息 “Cat initiae”，因此我使用 git commit –amend 來修改成正確的訊息。</p><h2 id="強制回復到上一次-commit-的版本"><a href="#強制回復到上一次-commit-的版本" class="headerlink" title="強制回復到上一次 commit 的版本"></a>強制回復到上一次 commit 的版本</h2><p>有時候我們想要放棄所有修改回到 commit 時的狀態，這時候我們可以下 git <code>reset --hard HEAD</code> 來回復，HEAD 參數可以加上一些變化，例如 HEAD^ 表示目前版本的上一個版本 HEAD~2 則是再上一個，因此你可以自由的跳回去之前的狀態。</p><p><em>如果您想要保存修改過的檔案，請勿下此指令，請用上面的方式去解決。!!</em></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API by node jsexpress 紀錄</title>
      <link href="/2018/01/23/RESTfulAPIbynodejsexpress%E5%AF%A6%E6%88%B0/"/>
      <url>/2018/01/23/RESTfulAPIbynodejsexpress%E5%AF%A6%E6%88%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="計畫要做甚麼"><a href="#計畫要做甚麼" class="headerlink" title="計畫要做甚麼"></a>計畫要做甚麼</h1><h2 id="簡單需要登入控制的SHOP"><a href="#簡單需要登入控制的SHOP" class="headerlink" title="簡單需要登入控制的SHOP"></a>簡單需要登入控制的SHOP</h2><p> 架構圖如下:</p><p> <img src="https://i.imgur.com/XuFhvPw.jpg" alt="Imgur"></p><h2 id="準備工具"><a href="#準備工具" class="headerlink" title="準備工具"></a>準備工具</h2><p> <a href="https://www.getpostman.com/">PostMan</a></p><h2 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h2><p>我用 <a href="https://www.mongodb.com/cloud/atlas/pricing">MongoDB Atlas</a><br>有免費版本流量夠測試使用</p><h2 id="products"><a href="#products" class="headerlink" title="/products"></a>/products</h2><ul><li>/products:GET: 產品列表</li><li>/products:POST: 產品新增</li><li>/products/{id}:GET: 單一產品資訊</li><li>/products/{id}:PATCH: 單一產品修改</li><li>/products/{id}:DELETE: 單一產品刪除<hr></li></ul><h2 id="orders"><a href="#orders" class="headerlink" title="/orders"></a>/orders</h2><ul><li>/orders:GET: 訂單列表</li><li>/orders:POST: 訂單新增</li><li>/orders/{id}:GET: 單一訂單資訊</li><li>/orders/{id}:DELETE: 單一訂單取消</li></ul><p>上圖紅色部分是需要使用者登入才能操作的請求。</p><h1 id="目錄結構"><a href="#目錄結構" class="headerlink" title="目錄結構"></a>目錄結構</h1><figure class="image-box">                <img src="https://i.imgur.com/pQiYrzZ.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h1 id="部分程式碼講解"><a href="#部分程式碼講解" class="headerlink" title="部分程式碼講解"></a>部分程式碼講解</h1><p>在製作過程會有一些遇到的問題在下面我都整理了起來</p><p>完整檔案在 <a href="https://github.com/dandanXO/node-RESTfulAPI-shop">GITHUB</a> 上</p><h2 id="Server-js"><a href="#Server-js" class="headerlink" title="Server.js"></a>Server.js</h2><p>一些基本nodejs server設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const app = require(&#x27;./app&#x27;);</span><br><span class="line"></span><br><span class="line">const port = process.env.port || 3000;</span><br><span class="line"></span><br><span class="line">const server = http.createServer(app);</span><br><span class="line">server.listen(port);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="App-js-部分"><a href="#App-js-部分" class="headerlink" title="App.js 部分"></a>App.js 部分</h2><h3 id="錯誤控制"><a href="#錯誤控制" class="headerlink" title="錯誤控制"></a>錯誤控制</h3><p>基本的流程或是路由錯誤控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// errro control</span><br><span class="line">app.use((req, res, next)=&gt;&#123;</span><br><span class="line">    const error = new Error(&#x27;Not found&#x27;);</span><br><span class="line">    error.status=404;</span><br><span class="line">    next(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use((error,req,res,next)=&gt;&#123;</span><br><span class="line">    res.status(error.status || 500);</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        error:&#123;</span><br><span class="line">            message: error.message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用的套件或是middleware"><a href="#使用的套件或是middleware" class="headerlink" title="使用的套件或是middleware"></a>使用的套件或是middleware</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line">const morgan = require(&#x27;morgan&#x27;);</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;)</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br></pre></td></tr></table></figure><h3 id="nodemon-amp-morgan"><a href="#nodemon-amp-morgan" class="headerlink" title="nodemon &amp; morgan"></a>nodemon &amp; morgan</h3><p>好用的自動restart與debug模組<br>在 <code>packeage.json</code>中加入<code> &quot;start&quot;: &quot;nodemon server.js&quot;</code></p><p>morgan使用</p><p>在<code>app.js.</code>中放入<code>var morgan = require(&#39;morgan&#39;);</code> 和<code>app.use(morgan(&#39;dev&#39;))</code></p><h2 id="Router-部分"><a href="#Router-部分" class="headerlink" title="Router 部分"></a>Router 部分</h2><p>我是想有 orders products user5這三個部分﹐分別處理不同功能</p><p>orders products 需要跟controller 一起看 </p><p>多了一個controller讓可讀性與維護性更高</p><p>基本上這部分都是一些資料庫控操作與權限控制</p><h3 id="order部分"><a href="#order部分" class="headerlink" title="order部分"></a>order部分</h3><p>在mongoose models 地方有用了 ref這參數</p><p><code>product: &#123; type: mongoose.Schema.Types.ObjectId, ref: &#39;Product&#39;, required: true &#125;,</code><br>product 這一欄參數是參考 Product這個集合的</p><p>在<code>orders_get_all</code> 就可以列出product這個集合的資料<br>在mongoose使用這個<code>.populate(&quot;product&quot;, &quot;name&quot;)</code>函數就可以控制</p><h2 id="api-token-實作方法"><a href="#api-token-實作方法" class="headerlink" title="api token 實作方法"></a>api token 實作方法</h2><p>這裡是使用 <a href="https://jwt.io/">JWT</a> 這個套件來實作</p><p>在<code>user/login</code>的地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                        const token =jwt.sign(&#123;</span><br><span class="line">                            email:user[0].email,</span><br><span class="line">                            userId:user[0]._id</span><br><span class="line">                            &#125;,</span><br><span class="line">                            process.env.JWT_key,</span><br><span class="line">                            &#123;</span><br><span class="line">                                expiresIn: &quot;1h&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        );   </span><br><span class="line">                return res.status(200).json(&#123;</span><br><span class="line">                    message:&#x27;Auth successful&#x27;,</span><br><span class="line">                    token:token</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>讓成功登入者取得TOKEN</p><p>在使用此TOKEN 來進行上述紅色需要驗證的部分</p><p>在所有需要驗證的URL錢加上middleware 來成功實作出API+驗證機制</p><p><code>checkAuth</code>使自己製作的middleware 在 middleware資料夾當中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const jwt = require(&#x27;jsonwebtoken&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = (req, res, next) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const decoded = jwt.verify(req.headers.authorization.split(&quot; &quot;)[1], process.env.JWT_key)</span><br><span class="line">    req.userData = decoded;</span><br><span class="line">    next();</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    return res.status(401).json(&#123;</span><br><span class="line">      message: &#x27;Auth failed&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式E.G. :<code>router.post(&quot;/&quot;, checkAuth, upload.single(&#39;productImage&#39;), ProductsController.products_create_product);</code></p><p>根據上面方式 使用postman 來測試</p><p><strong>Body</strong></p><figure class="image-box">                <img src="https://i.imgur.com/5An4dGb.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p><strong>HEADER</strong></p><figure class="image-box">                <img src="https://i.imgur.com/WsjB6bL.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h2 id="user部分"><a href="#user部分" class="headerlink" title="user部分"></a>user部分</h2><p>在signup 有用bcrypt 進行加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">bcrypt.hash(req.body.password, 10,(err,hash) =&gt; &#123;</span><br><span class="line">               if(err)&#123;</span><br><span class="line">                   return res.status(500).json(&#123;</span><br><span class="line">                       error:err</span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;else&#123;</span><br><span class="line">                   const addUser = new User(&#123;</span><br><span class="line">                       _id: new mongoose.Types.ObjectId(),</span><br><span class="line">                       email: req.body.email,</span><br><span class="line">                       password: hash</span><br><span class="line">                   &#125;);</span><br><span class="line">                   addUser.save()</span><br><span class="line">                   .then(result =&gt; &#123;</span><br><span class="line">                       res.status(201).json(&#123;</span><br><span class="line">                           message: &#x27;User created&#x27;</span><br><span class="line">                       &#125;)</span><br><span class="line">                   &#125;)</span><br><span class="line">                   .catch(err =&gt; &#123;</span><br><span class="line">                       console.log(err);</span><br><span class="line">                       res.status(500).json(&#123;</span><br><span class="line">                           error:err</span><br><span class="line">                       &#125;)</span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RESTFulAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
            <tag> express </tag>
            
            <tag> JWT </tag>
            
            <tag> RESTFulAPI </tag>
            
            <tag> MONGODB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File Uploader With NodeJs</title>
      <link href="/2017/12/15/FileUploaderWithNodeJs/"/>
      <url>/2017/12/15/FileUploaderWithNodeJs/</url>
      
        <content type="html"><![CDATA[<h1 id="File-Uploader-With-NodeJs-一些紀錄與坑"><a href="#File-Uploader-With-NodeJs-一些紀錄與坑" class="headerlink" title="File Uploader With NodeJs 一些紀錄與坑"></a>File Uploader With NodeJs 一些紀錄與坑</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要做一個可以上傳檔案到伺服器的基礎網站一些歷程記錄。</p><h2 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h2><p>這當中會用到 <a href="https://github.com/felixge/node-formidable">formidable</a>模組，可以先行安裝</p><p><code>npm install express formidable --save</code></p><h2 id="The-Front-End"><a href="#The-Front-End" class="headerlink" title="The Front End"></a>The Front End</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>簡單的前端使用bootstrap 就行了 在 <em>views/</em> 之中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>File Uploader - coligo.io<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&#x27;https://fonts.googleapis.com/css?family=Raleway&#x27;</span> <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/css&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-cloud-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>File Uploader<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>coligo.io<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">role</span>=<span class="string">&quot;progressbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg upload-btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Upload File<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;upload-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploads[]&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-2.2.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;javascripts/upload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;input id=&quot;upload-input&quot; type=&quot;file&quot; name=&quot;uploads[]&quot; multiple=&quot;multiple&quot;&gt;</code></p><p>這行需要特別注意 <em>type=”file”</em>  將會時做出一個選擇檔案的按鈕用來上傳。</p><figure class="image-box">                <img src="https://coligo.io/building-ajax-file-uploader-with-node/file-input-box.png" alt="imgur" title="" class="">                <p>imgur</p>            </figure><p><code>multiple=&quot;multiple</code> 可以更改決定上船是否為單一或是多個檔案。</p><p>接著先將上面的<code>&lt;input id=&quot;upload-input&quot; type=&quot;file&quot; name=&quot;uploads[]&quot; multiple=&quot;multiple&quot;&gt;</code>使用CSS隱藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#upload-input &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為後面會使用端的javascirpt來操作他。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>在 <em>public/css/</em> 之中創建CSS如底下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span>, <span class="selector-class">.upload-btn</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4791D2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Raleway&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#F89406</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-btn</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.upload-btn</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-class">.upload-btn</span><span class="selector-pseudo">:active</span>,</span><br><span class="line"><span class="selector-class">.upload-btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FA8900</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#B8BDC1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.glyphicon</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">5em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#9CA3A9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#68757E</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#upload-input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><p>前面樣式與面綁調整好之後接下來就是使用者端javascript的邏輯部分，先解決剛剛隱藏掉的upload按鈕如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.upload-btn&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#upload-input&#x27;</span>).click();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然後因為有處理進度條的 <em>%數</em> 需要重置因此如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.upload-btn&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#upload-input&#x27;</span>).click();</span><br><span class="line">    $(<span class="string">&#x27;.progress-bar&#x27;</span>).text(<span class="string">&#x27;0%&#x27;</span>);</span><br><span class="line">    $(<span class="string">&#x27;.progress-bar&#x27;</span>).width(<span class="string">&#x27;0%&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下來是最重要的上傳邏輯部分 <em>#uplaod-input</em> 改變時做出將檔案使用陣列與key/value方式整理好如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#upload-input&#x27;</span>).on(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> files = $(<span class="built_in">this</span>).get(<span class="number">0</span>).files;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// One or more files selected, process the file upload</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a FormData object which will be sent as the data payload in the</span></span><br><span class="line">    <span class="comment">// AJAX request</span></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop through all the selected files</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> file = files[i];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add the files to formData object for the data payload</span></span><br><span class="line">      formData.append(<span class="string">&#x27;uploads[]&#x27;</span>, file, file.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>緊接著 AJAX request 使用POST方法送到我們 /upload 的endpoint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: &#x27;/upload&#x27;,</span><br><span class="line">  type: &#x27;POST&#x27;,</span><br><span class="line">  data: formData,</span><br><span class="line">  processData: false,</span><br><span class="line">  contentType: false,</span><br><span class="line">  success: function(data)&#123;</span><br><span class="line">      console.log(&#x27;upload successful!&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意賈有使用Csrf做認證的話需要以下而外的東西</p></blockquote><ol><li>getCsrfToken的函數:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCsrfToken</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> metas = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>); </span><br><span class="line">        </span><br><span class="line">          <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;metas.length; i++) &#123; </span><br><span class="line">            <span class="keyword">if</span> (metas[i].getAttribute(<span class="string">&quot;name&quot;</span>) == <span class="string">&quot;_csrf&quot;</span>) &#123; </span><br><span class="line">                <span class="built_in">console</span>.log(metas[i].getAttribute(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">               <span class="keyword">return</span> metas[i].getAttribute(<span class="string">&quot;value&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure></li><li>在headers加入認證header:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csrf = getCsrfToken();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">...</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;_csrf&#x27;</span>:csrf,</span><br><span class="line">        <span class="string">&#x27;X-CSRF-Token&#x27;</span>: csrf</span><br><span class="line">    &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><p>基本上這樣上傳邏輯就完成了，下面是要控制 <em>progress-bar</em> 的 callback:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">xhr: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// create an XMLHttpRequest</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// listen to the &#x27;progress&#x27; event</span></span><br><span class="line">  xhr.upload.addEventListener(<span class="string">&#x27;progress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (evt.lengthComputable) &#123;</span><br><span class="line">      <span class="comment">// calculate the percentage of upload completed</span></span><br><span class="line">      <span class="keyword">var</span> percentComplete = evt.loaded / evt.total;</span><br><span class="line">      percentComplete = <span class="built_in">parseInt</span>(percentComplete * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// update the Bootstrap progress bar with the new percentage</span></span><br><span class="line">      $(<span class="string">&#x27;.progress-bar&#x27;</span>).text(percentComplete + <span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">      $(<span class="string">&#x27;.progress-bar&#x27;</span>).width(percentComplete + <span class="string">&#x27;%&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// once the upload reaches 100%, set the progress bar text to done</span></span><br><span class="line">      <span class="keyword">if</span> (percentComplete === <span class="number">100</span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.progress-bar&#x27;</span>).html(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後整個js檔案會像這樣裡面我自己有一些註解的debug用程式碼:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.upload-btn&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#upload-input&#x27;</span>).click();</span><br><span class="line">    $(<span class="string">&#x27;.progress-bar&#x27;</span>).text(<span class="string">&#x27;0%&#x27;</span>);</span><br><span class="line">    $(<span class="string">&#x27;.progress-bar&#x27;</span>).width(<span class="string">&#x27;0%&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#upload-input&#x27;</span>).on(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> files = $(<span class="built_in">this</span>).get(<span class="number">0</span>).files;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// create a FormData object which will be sent as the data payload in the</span></span><br><span class="line">    <span class="comment">// AJAX request</span></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop through all the selected files and add them to the formData object</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> file = files[i];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add the files to formData object for the data payload</span></span><br><span class="line">      formData.append(<span class="string">&#x27;uploads[]&#x27;</span>, file, file.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCsrfToken</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> metas = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>); </span><br><span class="line">        </span><br><span class="line">          <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;metas.length; i++) &#123; </span><br><span class="line">            <span class="keyword">if</span> (metas[i].getAttribute(<span class="string">&quot;name&quot;</span>) == <span class="string">&quot;_csrf&quot;</span>) &#123; </span><br><span class="line">                <span class="built_in">console</span>.log(metas[i].getAttribute(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">               <span class="keyword">return</span> metas[i].getAttribute(<span class="string">&quot;value&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> csrf = getCsrfToken();</span><br><span class="line">     <span class="comment">// console.log(csrf)</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/account/upload&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: formData ,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;_csrf&#x27;</span>:csrf,</span><br><span class="line">        <span class="string">&#x27;X-CSRF-Token&#x27;</span>: csrf</span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;upload successful!\n&#x27;</span> + data);</span><br><span class="line">          </span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, ajaxOptions, thrownError</span>) </span>&#123; </span><br><span class="line">        <span class="comment">//Add these parameters to display the required response</span></span><br><span class="line">        <span class="comment">//alert(xhr.status);</span></span><br><span class="line">        <span class="comment">//console.log(xhr.responseText);</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="attr">xhr</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// create an XMLHttpRequest</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// listen to the &#x27;progress&#x27; event</span></span><br><span class="line">        xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">        xhr.upload.addEventListener(<span class="string">&#x27;progress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (evt.lengthComputable) &#123;</span><br><span class="line">            <span class="comment">// calculate the percentage of upload completed</span></span><br><span class="line">            <span class="keyword">var</span> percentComplete = evt.loaded / evt.total;</span><br><span class="line">            percentComplete = <span class="built_in">parseInt</span>(percentComplete * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update the Bootstrap progress bar with the new percentage</span></span><br><span class="line">            $(<span class="string">&#x27;.progress-bar&#x27;</span>).text(percentComplete + <span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">            $(<span class="string">&#x27;.progress-bar&#x27;</span>).width(percentComplete + <span class="string">&#x27;%&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// once the upload reaches 100%, set the progress bar text to done</span></span><br><span class="line">            <span class="keyword">if</span> (percentComplete === <span class="number">100</span>) &#123;</span><br><span class="line">              $(<span class="string">&#x27;.progress-bar&#x27;</span>).html(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">              alert(<span class="string">&#x27;upload successful!\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//console.log(xhr.getAllResponseHeaders());</span></span><br><span class="line">        <span class="keyword">return</span> xhr;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="The-Back-End-Processing-the-Upload"><a href="#The-Back-End-Processing-the-Upload" class="headerlink" title="The Back End: Processing the Upload"></a>The Back End: Processing the Upload</h1><p>後端基本上就比較簡單了，這裡就不贅述<a href="expressjs.com">expressjs</a>的用法直接貼上完整的server.js</p><p>很多情況後端不會這麼簡單需要自行修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.sendFile(path.join(__dirname, <span class="string">&#x27;views/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/upload&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create an incoming form object</span></span><br><span class="line">  <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// specify that we want to allow the user to upload multiple files in a single request</span></span><br><span class="line">  form.multiples = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// store all uploads in the /uploads directory</span></span><br><span class="line">  form.uploadDir = path.join(__dirname, <span class="string">&#x27;/uploads&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// every time a file has been uploaded successfully,</span></span><br><span class="line">  <span class="comment">// rename it to it&#x27;s orignal name</span></span><br><span class="line">  form.on(<span class="string">&#x27;file&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">field, file</span>) </span>&#123;</span><br><span class="line">    fs.rename(file.path, path.join(form.uploadDir, file.name));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// log any errors that occur</span></span><br><span class="line">  form.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;An error has occured: \n&#x27;</span> + err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// once all the files have been uploaded, send a response to the client</span></span><br><span class="line">  form.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      res.cookie(<span class="string">&#x27;fileName&#x27;</span>,fileName)</span><br><span class="line">      res.end(<span class="string">&#x27;/uploads/News/&#x27;</span>+fileName);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// parse the incoming request containing the form data</span></span><br><span class="line">  form.parse(req);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uploadFile </tag>
            
            <tag> upload </tag>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
            <tag> Csrf </tag>
            
            <tag> xhr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise 筆記</title>
      <link href="/2017/12/08/Promise%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
      <url>/2017/12/08/Promise%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="Promises-A-標準定義"><a href="#Promises-A-標準定義" class="headerlink" title="Promises/A+標準定義"></a>Promises/A+標準定義</h2><p>所謂的<a href="https://promisesaplus.com/">Promises/A+</a>標準，其實就是個幾千字的一頁網頁而已，裡面的說明與用語並不會太難理解。雖然ES6標準中也有自己的Promise物件標準章節，但因為裡面涉及很多實作技術說明，明顯地用字遣詞艱澀許多，所以在這裡就不多加討論。以下使用Promises/A+標準作為一個開始，來解說Promise的標準裡有什麼內容。</p><h2 id="專門用語"><a href="#專門用語" class="headerlink" title="專門用語"></a>專門用語</h2><ul><li>promise (承諾)是一個帶有遵照這個規格的then方法的物件</li><li>thenable 是一個有定義then方法的物件</li><li>value 合法的JavaScript值(包含undefined、thenable與promise)</li><li>exception (例外)使用throw語句丟出來的值</li><li>reason (理由)是表明為什麼promise被拒絕(rejected)的值</li></ul><blockquote><p>註: 另外有個常見的專有名詞 settled(固定的) 一個promise最後的狀態，也就是fulfilled(已實現)或rejected(已拒絕)<br>註: reason(理由)通常是一個Error物件，用於錯誤處理。<br>註: promise/帕咪死/ 的中文翻譯是”承諾”、”約定”，本書中並不會用它的中文翻譯字詞，都是直接用英文。</p></blockquote><h2 id="Promise狀態"><a href="#Promise狀態" class="headerlink" title="Promise狀態"></a>Promise狀態</h2><p>promise物件必定是以下三種狀態中的其中一種: pending(等待中)、fulfilled(已實現)或rejected(已拒絕)。</p><p>2.1.1 當處在pending(等待中)時，一個promise:</p><p>2.1.1.1 可能會轉變到不是fulfilled(已實現)就是rejected(已拒絕)狀態</p><p>2.2.1 當處在fulfilled(已實現)時，一個promise:</p><p>2.2.1.1 必定不會再轉變到其他任何狀態</p><p>2.2.1.2 必定有不能再更動的值</p><p>2.3.1 當處在rejected(已拒絕)時，一個promise:</p><p>2.3.1.1 必定不會再轉變到其他任何狀態</p><p>2.3.1.2 必定有不能再更動的值reason(理由)</p><p>這個用下面的圖解說明，應該可以很清楚的理解:</p><figure class="image-box">                <img src="https://i.imgur.com/t1POUcO.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>狀態是在Promise結構很重要的一個屬性，因為promise物件一開始都是代表懸而未決的值，所以一開始在promise物件在建立時，狀態都是pending(等待中)，之後可以轉變到fulfilled(已實現)就是rejected(已拒絕)其中一個，然後就固定不變了。如果有產生value(值)的情況就是轉變到fulfilled(已實現)狀態，而如果是有reason(理由)時，代表要轉變到rejected(已拒絕)狀態。</p><h1 id="建立一個-Promise"><a href="#建立一個-Promise" class="headerlink" title="建立一個 Promise"></a>建立一個 Promise</h1><p>看完上面的比喻讓我們對應到 Javascript。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isMomHappy = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> willIGetNewPhone = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isMomHappy) &#123;</span><br><span class="line">    <span class="keyword">var</span> phone = &#123;</span><br><span class="line">      <span class="attr">brand</span>: <span class="string">&#x27;Samsung&#x27;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;s8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resolve(phone)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> reason = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Mom is unhappy&#x27;</span>)</span><br><span class="line">    reject(reason)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一行我們使用一個 Boolean <em>isMomHappy</em> 定義媽媽是否開心。<br>我們宣告一個 Promise _willIGetNewPhone_。這個 Promise 可能是被 <em>履行(resolved)</em> 又或者 _拒絕(rejected)_。<br>Promise 標準的語法可以參考 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN</a></p><p><code>    new Promise(function (resolve, reject) &#123;&#125;)</code></p><p>我們需要記得的是如果一個 Promise 執行成功要在內部 function 呼叫 <em>resolve(成功結果)</em> ，如果結果是失敗則呼叫 <em>reject(失敗結果)</em> 。在我們的範例中如果媽媽開心，我們將得到手機因此我們執行 _reslove(phone)_，如果媽媽不高興則執行 _reject(reason)_。</p><h2 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h2><p>到這一步我們已經有了一個 Promise，讓我們接著來使用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> askMom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  willIGetNewPhone</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">fulfilled</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(fulfilled)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error.message)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">askMom()</span><br></pre></td></tr></table></figure><ol><li>首先我們有個 function 叫 askMom 在這個 function 中，我們將利用 Promise willIGetNewPhone。</li><li>我們希望一旦等待的結果發生時可以採取對應的動作，我們可以使用 .then 或 .catch 來執行對應的行為。</li><li>在這個範例中，我們在 .then 中使用 function (fulfilled){}，而這個 fulfilled 就是從 Promise 的 resolve(成功結果) 傳來的結果，範例中這個結果就是 phone 物件。</li><li>在 .catch 中我們使用了 function (error) {}。而這個 error 就是從 Promise 的 reject(失敗結果) 傳來的即 reason。</li></ol><h2 id="鏈式調用-Promise"><a href="#鏈式調用-Promise" class="headerlink" title="鏈式調用 Promise"></a>鏈式調用 Promise</h2><p>假如你承諾您的朋友，如果你拿到新手機會借他們看看。這又是另一個 Promise。讓我們繼續來撰寫這個範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showOff = <span class="function"><span class="keyword">function</span> (<span class="params">phone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&#x27;Hey friend, I have a new &#x27;</span> + phone.color + <span class="string">&#x27; &#x27;</span> + phone.brand + <span class="string">&#x27; phone&#x27;</span> + phone.type</span><br><span class="line">    resolve(message)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在這個範例，您可能發現到我們根本沒有呼叫 reject，這是可選的，我們可以省略不調用。</li><li>另外，我們可以透過使用 Promise.resolve 簡化這個範例。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showOff = <span class="function"><span class="keyword">function</span> (<span class="params">phone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;Hey friend, I have a new &#x27;</span> + phone.color + <span class="string">&#x27; &#x27;</span> + phone.brand + <span class="string">&#x27; phone &#x27;</span> + phone.type</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著讓我們來看看如何串連 Promise。在 willIGetNewPhone 這個 Promise 之後接續 showOff Promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> askMom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  willIGetNewPhone</span><br><span class="line">    .then(showOff)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">fulfilled</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(fulfilled)</span><br><span class="line">      <span class="comment">// &#x27;Hey friend, I have a new black Samsung phone s8&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error.message)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這就是 Promise 串連的方式。</p><h1 id="非同步"><a href="#非同步" class="headerlink" title="非同步"></a>非同步</h1><p>Promise 是非同步的，讓我們在呼叫 Promise 的前後加上 console.log</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> askMom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;before asking Mom&#x27;</span>)</span><br><span class="line">  willIGetNewPhone</span><br><span class="line">    .then(showOff)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">fulfilled</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(fulfilled)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error.message)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;after asking Mom&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>順序是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. before asking Mom</span><br><span class="line">2. after asking Mom</span><br><span class="line">3. Hey friend, I have a new black Samsung phone s8</span><br></pre></td></tr></table></figure><h1 id="ES5，-ES6-ES2015，ES7-Next-的-Promise"><a href="#ES5，-ES6-ES2015，ES7-Next-的-Promise" class="headerlink" title="ES5， ES6/ES2015，ES7/Next 的 Promise"></a>ES5， ES6/ES2015，ES7/Next 的 Promise</h1><p>完整範例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isMomHappy = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> willIGetNewPhone = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isMomHappy) &#123;</span><br><span class="line">    <span class="keyword">const</span> phone = &#123;</span><br><span class="line">      <span class="attr">brand</span>: <span class="string">&#x27;Samsung&#x27;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;s8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resolve(phone)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reason = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Mom is not happy)</span></span><br><span class="line"><span class="string">    reject(reason)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">const showOff = function (phone) &#123;</span></span><br><span class="line"><span class="string">  const message = &#x27;</span>Hey friend, I have a <span class="keyword">new</span> <span class="string">&#x27; + phone.color + &#x27;</span> <span class="string">&#x27; + phone.brand + &#x27;</span> phone <span class="string">&#x27; + phone.type</span></span><br><span class="line"><span class="string">  return Promise.resolve(message)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">const askMom = function () &#123;</span></span><br><span class="line"><span class="string">  willIGetNewPhone</span></span><br><span class="line"><span class="string">    .then(showOff)</span></span><br><span class="line"><span class="string">    .then(fulfilled =&gt; console.log(fulfilled))</span></span><br><span class="line"><span class="string">    .catch(error =&gt; console.log(error.message))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">askMom()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
            <tag> Promise </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>passportjs 筆記</title>
      <link href="/2017/12/06/passportjs%E7%AD%86%E8%A8%98/"/>
      <url>/2017/12/06/passportjs%E7%AD%86%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<h1 id="passportjs-筆記"><a href="#passportjs-筆記" class="headerlink" title="passportjs 筆記"></a>passportjs 筆記</h1><figure class="image-box">                <img src="https://i.imgur.com/Se9H7n4.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h1 id="環境要求"><a href="#環境要求" class="headerlink" title="環境要求"></a>環境要求</h1><p>Nodejs，然後資料庫用來存儲用戶數據；另外passport作為中間件，需要依賴Express和Connect，還有由於Express 3.x或4.x以後的版本將一些中間件分離出去，因此你還需要先安裝它們。其中express-flash是用於顯示提示信息的中間件，是可選則的，如果需要用到passport中的提示，則需要安裝。</p><h2 id="主要的中間件"><a href="#主要的中間件" class="headerlink" title="主要的中間件"></a>主要的中間件</h2><ul><li>Express：web框架。或其他支持的框架。</li><li>Connect：中間件框架。</li><li>cookie-parser：Connect的cookie解析中間件。</li><li>express-session：Connect的session解析中間件，依賴於cookie-parser。</li><li>express-flash：express的消息提示中間件，可選，但一般情況下都需要裝。</li></ul><h2 id="安裝和配置"><a href="#安裝和配置" class="headerlink" title="安裝和配置"></a>安裝和配置</h2><p>你最少需要安裝一個passport <em>策略</em> 來使用它，一般而言本地驗證策略passport-local是必裝的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install passport</span><br><span class="line">npm install passport-local</span><br></pre></td></tr></table></figure><p>安裝完成後需要配置中間件，一般的順序如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> flash = <span class="built_in">require</span>(<span class="string">&#x27;express-flash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(session(&#123;...&#125;));</span><br><span class="line">app.use(passport.initialize());</span><br><span class="line">app.use(passport.session());</span><br><span class="line">app.use(flash())</span><br></pre></td></tr></table></figure><p>其中重要的是app.use()部分，express中的中間件順序很重要，注意不要弄錯，除非你知道不同中間件間的準確相依關係。</p><hr><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>passport用的比較多的有local本地驗證和OAuth驗證。</p><p>你也可以看看這兩篇，Express結合<a href="http://blog.fens.me/nodejs-express-passport/">Passport實現登陸認證</a>和<a href="http://blog.fens.me/nodejs-oauth-passport/">Passport實現社交網絡OAuth登陸</a>，裡面的示例涵蓋了基本的用法，本文也參考<br>了其中的一些例子。</p><ul><li>local本地驗證</li><li>配置策略</li><li>usernameField</li><li>驗證回調</li><li>密碼驗證</li><li>session序列化與反序列化</li><li>Authenticate驗證</li><li>HTTP請求操作</li><li>完整範例</li><li>OAuth驗證</li><li>OAuth驗證流程</li><li>OAuth1.0</li><li>OAuth2.0的</li><li>使用passport-x插件</li><li>OAuth驗證的邏輯</li></ul><h2 id="local本地驗證"><a href="#local本地驗證" class="headerlink" title="local本地驗證"></a>local本地驗證</h2><p>本地驗證預設使用用戶名和密碼來進行驗證。</p><h3 id="配置策略"><a href="#配置策略" class="headerlink" title="配置策略"></a>配置策略</h3><p>在做驗證之前，首先需要對策略進行配置，官方的示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>)</span><br><span class="line">  , LocalStrategy = <span class="built_in">require</span>(<span class="string">&#x27;passport-local&#x27;</span>).Strategy;</span><br><span class="line"></span><br><span class="line">passport.use(<span class="keyword">new</span> LocalStrategy(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">username, password, done</span>) </span>&#123;</span><br><span class="line">    User.findOne(&#123; <span class="attr">username</span>: username &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> done(err); &#125;</span><br><span class="line">      <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;用户名不存在.&#x27;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!user.validPassword(password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;密码不匹配.&#x27;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> done(<span class="literal">null</span>, user);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>其中的是MongoDB的語法，意思是從數據庫的User集合中查詢一條數據，第一個參數是查詢條件，後面是callback，一般在callback中進行後續操作。<code>User.findOne()</code></p><p>這裡的邏輯很簡單，依次檢查、，如果出錯則返回錯誤信息，如果通過則返回。<code>usernamepassworddone(null,user)</code></p><h3 id="usernameField"><a href="#usernameField" class="headerlink" title="usernameField"></a>usernameField</h3><p>前面說過passport默認使用用戶名和密碼來驗證，但實際上也有很多需要用郵箱來驗證的，那麼如何實現呢？</p><p>passport在策略配置裡提供了options參數，用來設置你要驗證的字段名稱，即usernameField，使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</span><br><span class="line">    <span class="attr">usernameField</span>: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">    <span class="attr">passwordField</span>: <span class="string">&#x27;passwd&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">username, password, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p> <em>注意，這裡的字段名稱應該是頁面表單提交的名稱，即req.body.xxx，而不是user數據庫中的字段名稱。</em></p><p> 將options作為LocalStrategy第一個參數傳入即可。</p><h3 id="驗證callback"><a href="#驗證callback" class="headerlink" title="驗證callback"></a>驗證callback</h3><p> passport本身不處理驗證，驗證方法在策略配置的回調函數里由用戶自行設置，它又稱為驗證回調。驗證回調需要返回驗證結果，這是由done()來完成的。</p><p>在passport.use()裡面，done()有三種用法：</p><ul><li><p>當發生系統級異常時，返回done(err)，這裡是數據庫查詢出錯，一般用next(err)，但這裡用done(err)，兩者的效果相同，都是返回error信息；</p></li><li><p>當驗證不通過時，返回done(null, false, message)，這裡的message是可選的，可通過express-flash調用；</p></li><li><p>當驗證通過時，返回done(null, user)。</p></li></ul><h3 id="密碼驗證"><a href="#密碼驗證" class="headerlink" title="密碼驗證"></a>密碼驗證</h3><p>一般對密碼進行hash和鹽化(solt)的Nodejs模塊是bcrypt，它提供一個compare方法來驗證密碼，如何使用它則超出本文的範圍，這裡就不講了。</p><h3 id="session序列化與反序列化"><a href="#session序列化與反序列化" class="headerlink" title="session序列化與反序列化"></a>session序列化與反序列化</h3><p>驗證用戶提交的憑證是否正確，是與session中儲存的對象進行對比，所以涉及到從session中存取數據，需要做session對象序列化與反序列化。調用代碼如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, user.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">id, done</span>) </span>&#123;</span><br><span class="line">  User.findById(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">    done(err, user);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這裡第一段代碼是將環境中的user.id序列化到session中，即sessionID，同時它將作為憑證存儲在用戶cookie中。</p><p>第二段代碼是從session反序列化，參數為用戶提交的sessionID，若存在則從數據庫中查詢user並存儲與req.user中。</p><p>這段代碼的順序可以放在passport.use()的前面或後面，但需要在app.configure()之前。</p><p><em>PS:其實這段只要到官方文件照抄就好不太需要變動到。</em></p><h3 id="Authenticate驗證"><a href="#Authenticate驗證" class="headerlink" title="Authenticate驗證"></a>Authenticate驗證</h3><p>做完了上面這些設置，我們終於可以開始做驗證了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">  passport.authenticate(<span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">successRedirect</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">     <span class="attr">failureRedirect</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">     <span class="attr">failureFlash</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 验证成功则调用此回调函数</span></span><br><span class="line">    res.redirect(<span class="string">&#x27;/users/&#x27;</span> + req.user.username);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>這裡的passport.authenticate(‘local’)就是中間件，若通過就進入後面的回調函數，並且給res加上res.user，若不通過則默認返回401錯誤。<br>uthenticate()方法有3個參數，第一是name，即驗證策略的名稱，第二個是options，包括下列屬性：</p><ul><li>session：Boolean。設置是否需要session，默認為true</li><li>successRedirect：String。設置當驗證成功時的跳轉鏈接</li><li>failureRedirect：String。設置當驗證失敗時的跳轉鏈接</li><li>failureFlash：Boolean or String。設置為Boolean時，express-flash將調用use()裡設置<br>的message。設置為String時將直接調用這裡的信息。</li><li>successFlash：Boolean or String。使用方法同上。</li></ul><p>第三個參數是callback。注意如果使用了callback，那麼驗證之後建立session和發出響應都應該由這個callback來做，passport中間件之後不應該再有其他中間件或callback。以下是代碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  passport.authenticate(<span class="string">&#x27;local&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, user, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> next(err); &#125;</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123; <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/login&#x27;</span>); &#125;</span><br><span class="line">    req.logIn(user, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> next(err); &#125;</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/users/&#x27;</span> + user.username);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)(req, res, next);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="HTTP請求操作"><a href="#HTTP請求操作" class="headerlink" title="HTTP請求操作"></a>HTTP請求操作</h3><p>注意上面的代碼裡有個req.logIn()，它不是http模塊原生的方法，也不是express中的方法，而是passport加上的，passport擴展了HTTP request，添加了四種方法。</p><ul><li>logIn(user, options, callback)：用login()也可以。作用是為登錄用戶初始化session。options可設置session為false，即不初始化session，默認為true。</li><li>logOut()：別名為logout()。作用是登出用戶，刪除該用戶session。不帶參數。</li><li>isAuthenticated()：不帶參數。作用是測試該用戶是否存在於session中（即是否已登錄）。若存在返回true。事實上這個比登錄驗證要用的更多，畢竟session通常會保留一段時間，在此期間判斷用戶是否已登錄用這個方法就行了。</li><li>isUnauthenticated()：不帶參數。和上面的作用相反。</li></ul><h3 id="完整範例"><a href="#完整範例" class="headerlink" title="完整範例"></a>完整範例</h3><p>基本上passport本地驗證的知識點就是這些，下面給出一個相對完整的示例，包括bcrypt的實現，這裡借用了nodeclub中的方法，為實現它你需要自己配置hash：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">&#x27;passport-local&#x27;</span>).Strategy;</span><br><span class="line"><span class="comment">//User模型需自己實作</span></span><br><span class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, user.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">id, done</span>) </span>&#123;</span><br><span class="line">  User.findById(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">    done(err, user);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//這裡username可以改成前端表單對應的名稱，如：</span></span><br><span class="line"><span class="comment">// &lt;form&gt;&lt;input type=&quot;text&quot; name=&quot;hehe&quot;&gt;...&lt;/form&gt;</span></span><br><span class="line"><span class="comment">//這裡將所有的username改成hehe</span></span><br><span class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123; <span class="attr">usernameField</span>: <span class="string">&#x27;username&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">username, password, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//實現用户名或電子郵件登錄</span></span><br><span class="line">  <span class="comment">//這裡判斷提交上的username是否含有@，來決定查詢的字段是哪一個</span></span><br><span class="line">  <span class="keyword">var</span> criteria = (username.indexOf(<span class="string">&#x27;@&#x27;</span>) === -<span class="number">1</span>) ? &#123;<span class="attr">username</span>: username&#125; : &#123;<span class="attr">email</span>: username&#125;;</span><br><span class="line">  User.findOne(criteria, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;用戶名或電子郵件 &#x27;</span> + username + <span class="string">&#x27; 不存在&#x27;</span>&#125;);</span><br><span class="line">    bcompare(password, hash, <span class="function"><span class="keyword">function</span>(<span class="params">err, isMatch</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, user);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;密码不符&#x27;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(session(&#123;<span class="attr">secret</span>: <span class="string">&quot;need change&quot;</span>&#125;));</span><br><span class="line">app.use(passport.initialize());</span><br><span class="line">app.use(passport.session());</span><br><span class="line">app.use(flash());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, passport.authenticate(<span class="string">&#x27;local&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, user, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      req.flash(<span class="string">&#x27;errors&#x27;</span>, &#123; <span class="attr">msg</span>: info.message &#125;);</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    req.logIn(user, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">      req.flash(<span class="string">&#x27;success&#x27;</span>, &#123; <span class="attr">msg</span>: <span class="string">&#x27;登入成功！&#x27;</span> &#125;);</span><br><span class="line">      res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)(req, res, next)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//getUser方法需要自定義</span></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, isAuthenticated, getUser);</span><br><span class="line">app.get(<span class="string">&#x27;/logout&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  req.logout();</span><br><span class="line">  res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//將req.isAuthenticated()封裝成中間件</span></span><br><span class="line"><span class="keyword">var</span> isAuthenticated = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.isAuthenticated()) <span class="keyword">return</span> next();</span><br><span class="line">  res.redirect(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bcompare = <span class="function"><span class="keyword">function</span> (<span class="params">str, hash, callback</span>) </span>&#123;</span><br><span class="line">bcrypt.compare(str, hash, callback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>基本的local驗證就到這裡，下篇還有進階的驗證技巧，比如在RESTful API中使用passport，驗證多個條件等。</p><h2 id="OAuth驗證"><a href="#OAuth驗證" class="headerlink" title="OAuth驗證"></a>OAuth驗證</h2><p>OAuth驗證是體現passport強大的地方，如果你看過nodeclub的源碼，會發現它自己實現了local驗證，但它的Github驗證是用passport來實現的。</p><p>OAuth標準分為兩個版本，1.0版和2.0版，兩者被使用的都很廣泛，passport通過passport-oauth為兩者提供支持，使用下面的命令可以安裝。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install passport-oauth</span><br></pre></td></tr></table></figure><h3 id="OAuth驗證流程"><a href="#OAuth驗證流程" class="headerlink" title="OAuth驗證流程"></a>OAuth驗證流程</h3><p>OAuth1.0和2.0的使用流程都差不多，一般來說如下：</p><ol><li> 為你的app去第三方服務商處申請標識和令牌appkey和secret；</li><li>在你的app裡添加按鈕或鏈接，將用戶引導至服務商的授權頁，用戶在這裡選擇授權給你的app；</li><li>授權成功後跳轉回你的app，同時還傳遞回access_token和一些用戶資料。</li></ol><p>到這里首次驗證流程就完成了，之後只要拿access_token去就可以做登錄驗證或者其他事了。</p><h3 id="OAuth1-0"><a href="#OAuth1-0" class="headerlink" title="OAuth1.0"></a>OAuth1.0</h3><p>要使用passport OAuth1.0驗證你需要先引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var passport = require(&#x27;passport&#x27;)</span><br><span class="line">  , OAuthStrategy = require(&#x27;passport-oauth&#x27;).OAuthStrategy;</span><br></pre></td></tr></table></figure><p>然後是配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">passport.use(<span class="string">&#x27;provider&#x27;</span>, <span class="keyword">new</span> OAuthStrategy(&#123;</span><br><span class="line">    <span class="attr">requestTokenURL</span>: <span class="string">&#x27;https://www.provider.com/oauth/request_token&#x27;</span>,</span><br><span class="line">    <span class="attr">accessTokenURL</span>: <span class="string">&#x27;https://www.provider.com/oauth/access_token&#x27;</span>,</span><br><span class="line">    <span class="attr">userAuthorizationURL</span>: <span class="string">&#x27;https://www.provider.com/oauth/authorize&#x27;</span>,</span><br><span class="line">    <span class="attr">consumerKey</span>: <span class="string">&#x27;123-456-789&#x27;</span>,</span><br><span class="line">    <span class="attr">consumerSecret</span>: <span class="string">&#x27;shhh-its-a-secret&#x27;</span></span><br><span class="line">    <span class="attr">callbackURL</span>: <span class="string">&#x27;https://www.example.com/auth/provider/callback&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">token, tokenSecret, profile, done</span>) </span>&#123;</span><br><span class="line">    User.findOrCreate(..., <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">      done(err, user);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>這裡比通用流程多的一點就是，你的App需要先訪問第三方服務，獲取request token，這個request token是未授權的，等用戶授權之後，可以拿這個request token去換取access token。</p><p>在passport中你不必管這些細節，找到第三服務的文檔找到對應的URL添上即可。當然你還得申請key和secret。</p><p>use方法的回調接受四個參數，token就是access token，和tokenSecret一起好好保存。profile則是用戶在第三方服務上的一些公開資料，它的模型在<a href="http://www.passportjs.org/docs/profile">這裡</a>，不過返回的資料不一定全面，在使用前需要驗證是否存在。</p><h3 id="OAuth2-0的"><a href="#OAuth2-0的" class="headerlink" title="OAuth2.0的"></a>OAuth2.0的</h3><p>OAuth2.0的驗證不需要request_token，但比1.0多了scope和refresh token，我們先來看看具體的配置方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>)</span><br><span class="line">  , OAuth2Strategy = <span class="built_in">require</span>(<span class="string">&#x27;passport-oauth&#x27;</span>).OAuth2Strategy;</span><br><span class="line"></span><br><span class="line">passport.use(<span class="string">&#x27;provider&#x27;</span>, <span class="keyword">new</span> OAuth2Strategy(&#123;</span><br><span class="line">    <span class="attr">authorizationURL</span>: <span class="string">&#x27;https://www.provider.com/oauth2/authorize&#x27;</span>,</span><br><span class="line">    <span class="attr">tokenURL</span>: <span class="string">&#x27;https://www.provider.com/oauth2/token&#x27;</span>,</span><br><span class="line">    <span class="attr">clientID</span>: <span class="string">&#x27;123-456-789&#x27;</span>,</span><br><span class="line">    <span class="attr">clientSecret</span>: <span class="string">&#x27;shhh-its-a-secret&#x27;</span></span><br><span class="line">    <span class="attr">callbackURL</span>: <span class="string">&#x27;https://www.example.com/auth/provider/callback&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">accessToken, refreshToken, profile, done</span>) </span>&#123;</span><br><span class="line">    User.findOrCreate(..., <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">      done(err, user);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>refreshToken是重新獲取access token的方法，因為access token是有使用期限的，到期了必須讓用戶重新授權才行，現在有了refresh token，你可以讓應用定期的用它去更新access token，這樣第三方服務就可以一直綁定了。不過這個方法並不是每個服務商都提供，注意看服務商的文檔。</p><p>下面是路由，OAuth2.0也有一點不同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/auth/provider&#x27;</span>,</span><br><span class="line">  passport.authenticate(<span class="string">&#x27;provider&#x27;</span>, &#123; <span class="attr">scope</span>: <span class="string">&#x27;email&#x27;</span> &#125;)</span><br><span class="line">);</span><br><span class="line">app.get(<span class="string">&#x27;/auth/provider/callback&#x27;</span>,</span><br><span class="line">  passport.authenticate(<span class="string">&#x27;provider&#x27;</span>, &#123; <span class="attr">successRedirect</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                                      <span class="attr">failureRedirect</span>: <span class="string">&#x27;/login&#x27;</span> &#125;));</span><br></pre></td></tr></table></figure><p>scope是權限範圍，需要在服務商處事先申請，想進一步了解可參考微博的<a href="http://open.weibo.com/wiki/Scope">scope文檔</a>。它可以只有一項，也可以有多項，當為多項時以數組形式表示。</p><h3 id="使用passport-x插件"><a href="#使用passport-x插件" class="headerlink" title="使用passport-x插件"></a>使用passport-x插件</h3><p>passport-oauth包含通用的驗證方法，基本山任何提供OAuth的服務都能用上面的方法來驗證，但大部分提供第三方登錄的網站都有passport的插件，它們的列表見<a href="http://passportjs.org/guide/providers/">官網</a>和<a href="https://github.com/jaredhanson/passport/wiki/Strategies#providers">Github wiki</a>。使用它們可以讓app綁定第三方服務更加簡單和模塊化。<br>passport-x插件的一般用法如下（以Github為例）。</p><p>首先安裝passport-github，注意這種情況不需要安裝passport-oauth：</p><p><code>npm install passport-github</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>)</span><br><span class="line">  , GithubStrategy = <span class="built_in">require</span>(<span class="string">&#x27;passport-github&#x27;</span>).Strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//passport设置部分</span></span><br><span class="line">passport.use(<span class="keyword">new</span> GithubStrategy(&#123;</span><br><span class="line">    <span class="attr">clientID</span>: GITHUB_CLIENT_ID,</span><br><span class="line">    <span class="attr">clientSecret</span>: GITHUB_CLIENT_SECRET,</span><br><span class="line">    <span class="attr">callbackURL</span>: <span class="string">&quot;http://www.example.com/auth/github/callback&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">accessToken, refreshToken, profile, done</span>) </span>&#123;</span><br><span class="line">    User.findOrCreate(..., <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> done(err); &#125;</span><br><span class="line">      done(<span class="literal">null</span>, user);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">//路由部分</span></span><br><span class="line">app.get(<span class="string">&#x27;/auth/github&#x27;</span>, passport.authenticate(<span class="string">&#x27;github&#x27;</span>));</span><br><span class="line">app.get(<span class="string">&#x27;/auth/github/callback&#x27;</span>,</span><br><span class="line">  passport.authenticate(<span class="string">&#x27;github&#x27;</span>, &#123; <span class="attr">failureRedirect</span>: <span class="string">&#x27;/login&#x27;</span> &#125;),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">與通用OAuth驗證流程對比，上面的代碼少了服務商的驗證頁部分，你只需要將獲得的appkey和secret填到對應地方即可。</span></span><br><span class="line"><span class="string">### OAuth驗證的邏輯</span></span><br><span class="line"><span class="string">OAuth驗證的麻煩之處主要是處理邏輯，很多網站將第三方的OAuth作為一種用戶註冊手段，當用戶點擊第三方登錄時，若用戶未註冊會為他們創建賬號，這裡面的邏輯就比較繞了。比如Hackathon Starter的處理邏輯如下：</span></span><br></pre></td></tr></table></figure><p>/**</p><ul><li>OAuth驗證策略</li><li></li><li>用戶點擊“使用XX登陸”連接</li><li><ul><li>若用户已登陸</li></ul></li><li><ul><li>檢查該用户是否已經绑定XX服務</li></ul></li><li><pre><code>- 如果已绑定，返回錯誤（不允許帳戶合併）</code></pre></li><li><pre><code>- 否則開始驗證流程，為該用户綁定XX服務</code></pre></li><li><ul><li>用戶未登入</li></ul></li><li><ul><li>檢查是否是老用戶</li></ul></li><li><pre><code>- 如果是老用户，則登入</code></pre></li><li><pre><code>- 否則檢查OAuth返回profile中的email，是否在用戶存在於資料庫中</code></pre></li><li><pre><code>  - 如果存在，返回錯誤訊息</code></pre></li><li><pre><code>  - 否則創建一個新帳號</code></pre></li><li>/<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">另外還有平常驗證用戶是否已綁定某個服務，可以封裝成中間件：</span><br><span class="line">```js</span><br><span class="line">var isAuthorized = function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  if (req.user.provider)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    //do something else</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>學習OAuth驗證最好的項目是<a href="https://github.com/sahat/hackathon-starter">Hackathon Starter</a>，它實現了十幾種的第三方網站和服務的OAuth驗證，推薦學習。下面進階學習裡面還有如何開發一個passport OAuth驗證插件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> passportjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
            <tag> express </tag>
            
            <tag> passportjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongoose筆記</title>
      <link href="/2017/11/09/Mongoose%E7%AD%86%E8%A8%98/"/>
      <url>/2017/11/09/Mongoose%E7%AD%86%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<p><font color=MediumVioletRed size=7 >MONGOOSE</font></p><h1 id="連接"><a href="#連接" class="headerlink" title="連接"></a>連接</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">useMongoClient</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">autoIndex</span>: <span class="literal">false</span>, <span class="comment">// Don&#x27;t build indexes</span></span><br><span class="line">  <span class="attr">reconnectTries</span>: <span class="built_in">Number</span>.MAX_VALUE, <span class="comment">// Never stop trying to reconnect</span></span><br><span class="line">  <span class="attr">reconnectInterval</span>: <span class="number">500</span>, <span class="comment">// Reconnect every 500ms</span></span><br><span class="line">  <span class="attr">poolSize</span>: <span class="number">10</span>, <span class="comment">// Maintain up to 10 socket connections</span></span><br><span class="line">  <span class="comment">// If not connected, return errors immediately rather than waiting for reconnect</span></span><br><span class="line">  <span class="attr">bufferMaxEntries</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://帳號:密碼@localhost:27017/資料庫名稱&#x27;</span>,options)</span><br><span class="line">mongoose.Promise = <span class="built_in">global</span>.Promise; <span class="comment">//新版的一些問題</span></span><br></pre></td></tr></table></figure><h1 id="Schema設定"><a href="#Schema設定" class="headerlink" title="Schema設定"></a>Schema設定</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定集合內容與屬性</span></span><br><span class="line"><span class="keyword">var</span> userDataSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;<span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">String</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="built_in">String</span></span><br><span class="line">&#125;,</span><br><span class="line">  &#123;<span class="attr">collection</span>: <span class="string">&#x27;user-data&#x27;</span>&#125;  <span class="comment">//設定集合名稱 預設是 UserData加S</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserData = mongoose.model(<span class="string">&#x27;UserData&#x27;</span>, userDataSchema); <span class="comment">//以mongoose.model方式來宣告並使用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="mongoose-搜尋-新增-修改-刪除"><a href="#mongoose-搜尋-新增-修改-刪除" class="headerlink" title="mongoose 搜尋 新增 修改 刪除"></a>mongoose 搜尋 新增 修改 刪除</h1><h2 id="搜尋"><a href="#搜尋" class="headerlink" title="搜尋"></a>搜尋</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserData.find()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">doc</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item = &#123;</span><br><span class="line">  <span class="attr">titile</span> : <span class="string">&#x27;newtitle&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;someContent&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;someName&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newData = <span class="keyword">new</span> UserData(item);</span><br><span class="line">newData.save();</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = req.body.id;</span><br><span class="line"></span><br><span class="line">UserData.findById(id,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;error, no entry found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    doc.content = req.body.content;</span><br><span class="line">    doc.title = req.body.title;</span><br><span class="line">    doc.author = req.body.author;</span><br><span class="line">    doc.save();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id -req.body.id;</span><br><span class="line"></span><br><span class="line">UserData.findByIdAndRemove(id),exec();</span><br></pre></td></tr></table></figure><h1 id="參閱"><a href="#參閱" class="headerlink" title="參閱"></a>參閱</h1><p><a href="http://mongoosejs.com/docs/guide.html">MONGOSE文件</a></p>]]></content>
      
      
      <categories>
          
          <category> mongoose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> mongodb first </tag>
            
            <tag> first </tag>
            
            <tag> author </tag>
            
            <tag> mongodb author </tag>
            
            <tag> Mongoose </tag>
            
            <tag> nodeJs </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb第一次使用設定紀錄</title>
      <link href="/2017/11/05/mongodb%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/11/05/mongodb%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="image-box">                <img src="https://i.imgur.com/FyqcKvj.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p><a href="https://www.mongodb.com/">Mongodb</a>官網下載安裝即可</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><ul><li>解開 MongoDB<BR><br>下載好後就直接把他解開，比如放到 C:\MongoDB 下面。</li><li>建立資料目錄<BR><br>預設的安裝檔案中並沒有預設存放資料的目錄，所以要自己建立（多建一個 Logs 存放 Log 檔)：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd \mongodb</span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure></li></ul><h2 id="啟動服務"><a href="#啟動服務" class="headerlink" title="啟動服務"></a>啟動服務</h2><h3 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h3><p><code>mongod --dbpath=C:\mongodbData --logpath=C:\mongodbLog\log\mongod.log</code></p><h3 id="第一次之後"><a href="#第一次之後" class="headerlink" title="第一次之後"></a>第一次之後</h3><p><code>mongod --dbpath=C:\mongodbData --logpath=C:\mongodbLog\log\mongod.log --auth</code></p><p>後面會說明<code>--auth</code>的差異</p><h1 id="建立-‘admin’-or-‘root’"><a href="#建立-‘admin’-or-‘root’" class="headerlink" title="建立 ‘admin’ or ‘root’"></a>建立 ‘admin’ or ‘root’</h1><p><a href="https://www.mongodb.com/">Mongodb</a>很有趣(奇怪)的地方在於第一次進入可用允許任何進入，去做角色與使用者的設定。<BR><br>所以一開始就先進去建立你的腳色分配</p><p>切換到 admin Collection</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">  user: &quot;admin&quot;,</span><br><span class="line">  pwd: &quot;mypassword&quot;,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">    &quot;role&quot;: &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">    &quot;db&quot;: &quot;admin&quot;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果成功的話，畫面上會顯示類似下面的訊息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果你想要最完整權限的話可以在role加入這兩個</p><ul><li>“dbAdminAnyDatabase”</li><li>“readWriteAnyDatabase”</li></ul><p>參考<a href="https://docs.mongodb.com/manual/reference/built-in-roles/">mongodbRole</a></p><h1 id="重啟"><a href="#重啟" class="headerlink" title="重啟"></a>重啟</h1><p>用上方提到的<code>mongod --dbpath=C:\mongodbData --logpath=C:\mongodbLog\log\mongod.log --auth</code><br>重新啟動</p><h2 id="登入-admin-帳號"><a href="#登入-admin-帳號" class="headerlink" title="登入 admin 帳號"></a>登入 admin 帳號</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth(&quot;admin&quot;, &quot;mypassword&quot;)</span><br></pre></td></tr></table></figure><p>如果回傳 1 的話，即代表登入成功</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>至此，成功開啟 MongoDB 登入認證功能</p>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> mongodb first </tag>
            
            <tag> first </tag>
            
            <tag> author </tag>
            
            <tag> mongodb author </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo從0到有{二}</title>
      <link href="/2017/11/03/%E5%BE%9E0%E5%88%B0%E6%9C%89%7B%E4%BA%8C%7D/"/>
      <url>/2017/11/03/%E5%BE%9E0%E5%88%B0%E6%9C%89%7B%E4%BA%8C%7D/</url>
      
        <content type="html"><![CDATA[<h1 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h1><h2 id="第-二-部分"><a href="#第-二-部分" class="headerlink" title="第{二}部分"></a>第{二}部分</h2><ul><li>綁定域名</li><li>更換主題</li><li>初識MarkDown語法</li><li>發布文章</li><li>個性化設置</li><li>其他</li><li>附錄</li></ul><h1 id="綁定域名"><a href="#綁定域名" class="headerlink" title="綁定域名"></a>綁定域名</h1><p>雖然在Internet上可以訪問我們的網站，但是網址是GitHub提供的: <a href="http://xxxx.github.io/">http://xxxx.github.io</a> 而我們想使用我們自己的個性化域名，這就需要綁定我們自己的域名。這裡使用的是在<a href="www.cloudflare.com">cloudflare</a>的域名綁定，選用這家DNS主要要原因後面會提到，如何使用他們的免費SSL加密服務(俗稱綠頭)。登錄<a href="www.cloudflare.com">cloudflare</a>，進入管理控制台的DNS，加入這一串CNAME。</p><figure class="image-box">                <img src="https://i.imgur.com/tXbTwFe.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>CNAME的記錄值是：你的用戶名.github.io</p><p><del>第二步，登錄GitHub，進入之前創建的倉庫，點擊settings，設置Custom domain，輸入你的域名</del> (好像不用了?)</p><p>第三步，進入本基blog文件夾，進入blog/source目錄下，創建一個記事本文件，輸入你的域名，對，只要寫進你自己的域名即可(不要有任何符號不然會無法解析)。如果帶有blog(上面那張圖片)，那麼以後訪問的時候必須帶有blog完整的域名才可以訪問，但如果不帶有blog，以後訪問的時候帶不帶blog都可以訪問。看各人所需要:</p><figure class="image-box">                <img src="https://i.imgur.com/ZaA7NPU.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>完成這三步，進入blog目錄中，按住shift鍵右擊打開命令行，依序輸入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>這時候打開瀏覽器在地址欄輸入你的域名將會直接進入你自己搭建的網站。</p><h1 id="更換主題"><a href="#更換主題" class="headerlink" title="更換主題"></a>更換主題</h1><p>如果你不喜歡Hexo預設的主題，可以更換不同的主題，主題傳送門：Themes我自己使用的是Next主題，可以在blog目錄中的themes文件夾中看你自己主題是什麼。現在把預設主題更改成Next主題，在blog目錄中（就是命令行的位置處於blog目錄）打開命令行輸入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>這是將Next主題下載到blog目錄的themes主題下的next文件夾中。打開站點的_config.yml配置文件，修改主題為next。就可以了。</p><h1 id="初識Markdown語法"><a href="#初識Markdown語法" class="headerlink" title="初識Markdown語法"></a>初識Markdown語法</h1><p>Markdown是一種可以使用普通文本編輯器編寫的標記語言，通過簡單的標記語法，它可以使普通文本內容具有一定的格式。Markdown語法簡潔明了、容易掌握，而且功能比純文本更強，因此寫博客使用它，可以讓用戶更加專注的寫文章，而不需要費盡心力的考慮樣式，相對於html已經算是輕量級語言。並且Markdown完全與html相容，也就是可以在文章裡直接插入html代碼。比如給文章添加音樂，就可以直接把音樂的外鏈html代碼插入文章中。具體語法參看：Markdown語法說明(簡體中文版)可以說十分鐘就可以入門。當然，工欲善其事必先利其器，選擇一個好的Markdown編輯器也是非常重要的，這裡推薦MarkPad和The Markdown Editor for Windows與ATOM也是不錯的選擇 ，這是帶有預覽效果的編輯器，也可以使用本地的文本編輯器，更多的Markdown的語法與編輯器自己可以搜索了解。</p><h1 id="開始寫作"><a href="#開始寫作" class="headerlink" title="開始寫作"></a>開始寫作</h1><p>我們開始正式發布上線博客文章，在命令行中輸入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;新文章名字&quot;</span><br></pre></td></tr></table></figure><p>我們會發現在blog根目錄下的source文件夾中的_post文件夾中多了一個博客名字.md文件，使用Markdown編輯器打開，就可以開始你的個人博客之旅了，Markdown常用的樣式也就十來種，完全能夠滿足一般文章的樣式要求，這是我的一篇文章內容示例(ATOM編輯器)：</p><figure class="image-box">                <img src="https://i.imgur.com/0ziQhX6.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>通過帶有預覽樣式的Markdown編輯器實時預覽書寫的文章樣式，也可以通過命令<code>hexo s --debug</code> 在本地瀏覽器的 localhost:4000 預覽文章效果。寫好文章並且樣式無誤後，通過<code>hexo g、hexo d</code> 生成、部署網頁。隨後可以在瀏覽器中輸入域名瀏覽。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>  終於寫到這裡了，也算是基本圓滿完成了我的寫作初衷，總結自己的一些經驗，分享一些有趣的東西，不過脖子也是僵硬的受不了。我知道很多人想要建立自己的個人網站卻一直沒有行動，希望這篇文章能給你一點點靈感與想法，just do it。本文是windows平台的搭建過程，其他平台可以參看相關資料，也有很多其他優秀的博客框架值得學習。如果有任何建議或想法、或疑問歡迎在評論區交流，讓大家一起學習。</p><h1 id="附錄"><a href="#附錄" class="headerlink" title="附錄"></a>附錄</h1><p>分享一些有趣有有質感的HEXO blog</p><p><a href="http://link.zhihu.com/?target=https://www.dandyweng.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">翁天信· Dandy Weng</font></font></a> <a href="http://link.zhihu.com/?target=http://chaoxuprime.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">chaoxuprim</font></font></a> <a href="http://link.zhihu.com/?target=http://kenjiendo.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">KENJI ENDO</font></font></a> <a href="http://link.zhihu.com/?target=http://shenzekun.cn/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Moorez</font></font></a> <a href="http://link.zhihu.com/?target=https://codesky.me/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">CodeSky 代碼之空</font></font></a> <a href="http://link.zhihu.com/?target=http://www.helloshawn.cn/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">大江東去</font></font></a> <a href="http://link.zhihu.com/?target=http://iconmoon.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">UI Design Portfolio of JJ Ying</font></font></a> <a href="http://link.zhihu.com/?target=http://www.jeyzhang.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">JeyZhang</font></font></a> <a href="http://link.zhihu.com/?target=http://blog.lightina.cn/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">jacklightChen | 得到的都是僥倖</font></font></a> <a href="http://link.zhihu.com/?target=https://qingpei.me/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">edwardtoday</font></font></a> <a href="http://link.zhihu.com/?target=http://rafaltomal.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Rafal Tomal - Web Designer and Genesis Developer</font></font></a> <a href="http://link.zhihu.com/?target=http://strml.net/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Projects and Work</font></font></a> <a href="http://link.zhihu.com/?target=http://miaoxiaoer.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">繪畫愛好者</font></font></a> <a href="http://link.zhihu.com/?target=http://ursocute.github.io/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">萬世奇的博客</font></font></a> <a href="http://link.zhihu.com/?target=https://rauchg.com/"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Guillermo Rauch</font></font></a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
            <tag> Hexo </tag>
            
            <tag> NodeJs </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo從0到有{一}</title>
      <link href="/2017/11/02/%E5%BE%9E0%E5%88%B0%E6%9C%89/"/>
      <url>/2017/11/02/%E5%BE%9E0%E5%88%B0%E6%9C%89/</url>
      
        <content type="html"><![CDATA[<figure class="image-box">                <img src="https://i.imgur.com/n5LWEw5.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其實這東西真的是不小心發現的。類似jekyll但效能似乎更好<BR><br>題外話這東西是台灣人做的</p><ul><li>參見:<a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo">hexojs/hex</a></li></ul><h1 id="框架選擇"><a href="#框架選擇" class="headerlink" title="框架選擇"></a>框架選擇</h1><p>當然搭建blog並不是說自己從0 開始寫每一個頁面，實際上有很多現成強大的blog系統。只需要安裝，配置並挑選主題就能直接拿來用了。常見blog平台有以下幾個：<BR></p><ul><li><a href="https://hexo.io/zh-cn/" title="hexo">Hexo快速、簡潔且高效的靜態blog</a></li><li>[Ghost 基於Node.js 的開源blog平台](<a href="https://ghost.org/">https://ghost.org/</a> Ghost)</li><li><a href="https://wordpress.org/">Wordpress 強大的內容管理平台，可以建各類網站</a></li></ul><p>其中Hexo 和Ghost 可以使用Markdown 寫文章。Wordpress 非常強大，有豐富的插件和主題。但是對於一個簡單的blog來說過肥大，個人覺得不適合輕量級blog。</p><p> <a href="https://hexo.io/zh-cn/" title="hexo">Hexo</a>採用本地保存源文件並渲染成靜態頁面部署的方式，[Ghost](<a href="https://ghost.org/">https://ghost.org/</a> Ghost)則採用資料庫服務端查詢的方式渲染頁面。我個人比較喜歡<a href="https://hexo.io/zh-cn/" title="hexo">Hexo</a>。</p><h1 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h1><h2 id="第-一-部分"><a href="#第-一-部分" class="headerlink" title="第{一}部分"></a>第{一}部分</h2><ul><li>獲得個人域名</li><li>GitHub創建個人首頁或是專案首頁</li><li>安裝Git</li><li>安裝Node.js</li><li>安裝Hexo</li><li>推送網站</li></ul><hr><h2 id="第-二-部分"><a href="#第-二-部分" class="headerlink" title="第{二}部分"></a>第{二}部分</h2><ul><li>綁定域名</li><li>更換主題</li><li>初識MarkDown語法</li><li>發布文章</li><li>尋找圖床</li><li>其他</li><li>附錄</li></ul><h1 id="獲得個人域名"><a href="#獲得個人域名" class="headerlink" title="獲得個人域名"></a>獲得個人域名</h1><p>說白了就是一個網域名稱沒有的話去買一個就可以了，像我是在<a href="https://dcc.godaddy.com/">Godady</a>買，如果先前就有的話直接用就可以了。</p><h1 id="GitHub創建個人首頁或是專案首頁"><a href="#GitHub創建個人首頁或是專案首頁" class="headerlink" title="GitHub創建個人首頁或是專案首頁"></a>GitHub創建個人首頁或是專案首頁</h1><ol><li><del>辦github帳號</del>(廢話)</li><li>創建一個與你名字一樣的Repositories<br><br>新的Repositories的名稱就取 <strong>userName.github.io</strong><br><br>以我的舉例來說我的userName是dandanXO</li></ol><figure class="image-box">                <img src="https://i.imgur.com/MQjYNHe.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><br><p>那就把專案名稱取成<strong>dandanXO.github.io</strong>即可，分支為<em>master</em>。</p><h1 id="安裝-git"><a href="#安裝-git" class="headerlink" title="安裝 git"></a>安裝 git</h1><p>什麼是Git ?簡單來說Git是開源的分佈式版本控制系統，用於敏捷高效率的處理專案。<BR><br>到這裡下載<a href="https://git-scm.com/download/win">git</a><br><br>選個64位元的安裝完 點選  <figure class="image-box">                <img src="https://i.imgur.com/qFWFEkt.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><BR><br>設定git基本資料</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用戶名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub註冊信箱&quot;</span><br></pre></td></tr></table></figure><p>完成git部分。</p><h1 id="安裝Node-js"><a href="#安裝Node-js" class="headerlink" title="安裝Node.js"></a>安裝Node.js</h1><p>Hexo基於Node.js，Node.js下載地址：<a href="https://nodejs.org/en/download/">Download | Node.js</a> 下載安裝包，注意安裝Node.js會包含環境變量及npm的安裝，安裝後，檢測Node.js是否安裝成功，在命令行中輸入node -v :</p><figure class="image-box">                <img src="https://i.imgur.com/BaQDM2X.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><BR><p>到這Hexo的環境已經全部設定完畢。</p><h1 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h1><p>打開CMD<BR><br>使用npm命令安裝Hexo，輸入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>這個安裝時間較長耐心等待，安裝完成後，初始化我們的博客，輸入：</p><p>hexo init blog<br>注意，這裡的命令都是作用在剛剛創建的Blog文件夾中。</p><p>為了檢測我們的網站雛形，分別按順序輸入以下三條命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>這些命令在後面作介紹，完成後，打開瀏覽器輸入地址：</p><p><a href="http://localhost:4000/">http://localhost:4000/</a></p><p>可以看出我們寫出第一篇博客，只不過我下圖是我修改過的配置，和你的顯示不一樣。</p><figure class="image-box">                <img src="https://i.imgur.com/ggNPicP.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>剛剛的三個命令依次是新建一篇博客文章、生成網頁、在本地預覽的操作。</p><p>現在來介紹常用的Hexo命令</p><ul><li>npm install hexo -g #安裝Hexo</li><li>npm update hexo -g #升級</li><li>hexo init #初始化博客</li></ul><h2 id="命令簡寫"><a href="#命令簡寫" class="headerlink" title="命令簡寫"></a>命令簡寫</h2><ul><li>hexo n “我的博客” == hexo new “我的博客” #新建文章</li><li>hexo g == hexo generate #生成</li><li>hexo s == hexo server #啟動服務預覽</li><li>hexo d == hexo deploy #部署</li><li>hexo server #Hexo會監視文件變動並自動更新，無須重啟服務器</li><li>hexo server -s #靜態模式</li><li>hexo server -p 5000 #更改端口</li><li>hexo server -i 192.168.1.1 #自定義IP</li><li>hexo clean #清除緩存，若是網頁正常情況下可以忽略這條命令</li></ul><h1 id="推送網站"><a href="#推送網站" class="headerlink" title="推送網站"></a>推送網站</h1><p>上面只是在本機預覽，接下來要做的就是就是推送網站，也就是發佈網站，讓我們的網站可以被更多的人訪問。在設置之前，需要解釋一個概念，在blog根目錄裡的_config.yml文件稱為網站配置文件，如下圖</p><figure class="image-box">                <img src="https://i.imgur.com/eYGBFPD.jpg" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>下一步將我們的Hexo與GitHub關聯起來，打開站點的配置文件_config.yml，翻到最後修改為：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:這裡填入你之前在GitHub上創建專案的完整路徑，記得加上.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>參考如下：<BR></p><figure class="image-box">                <img src="https://i.imgur.com/RQIyMVP.png" alt="Imgur" title="" class="">                <p>Imgur</p>            </figure><p>其實就是給hexo d 這個命令做相應的配置，讓hexo知道你要把blog部署在哪個位置，很顯然，我們部署在我們GitHub的倉庫裡。最後安裝Git部署插件，輸入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>這時，我們分別輸入三條命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其實第三條的hexo d就是部署網站命令，d是deploy的縮寫。<BR><br>完成後，打開瀏覽器，在地址欄輸入你的放置個人網站的倉庫路徑，即http:// xxxx.github.io  <BR><br>xxxx就是我的GitHub用戶名。</p><p>以我的<a href="https://dandanxo.github.io/">https://dandanXo.github.io/</a>來說<br><br>你就會發現你的blog已經上線了，可以在網絡上被訪問了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> First </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
            <tag> Hexo </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HellWord</title>
      <link href="/2017/07/23/HellWord2/"/>
      <url>/2017/07/23/HellWord2/</url>
      
        <content type="html"><![CDATA[<h3 id="開端"><a href="#開端" class="headerlink" title="開端"></a>開端</h3><p>想說試試看用NodeJs開個部落格，後來發現</p><a href="https://hexo.io/" title="" target="">hexo</a><p>這個奇妙的東西，因此就開了這個部落格。</p>]]></content>
      
      
      <categories>
          
          <category> 第一次 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> First </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從拉麵店理解什麼是 API</title>
      <link href="/2000/11/02/Api/"/>
      <url>/2000/11/02/Api/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>API，全名叫做 Application Programming Interface，維基百科上的中文翻譯是：「應用程式介面」。這是一個你可能聽過很多次，但從來沒有理解過的東西，常常聽到工程師說著：「串 API」，但還是不知道 API 到底是什麼。</p><p>原本以為在網路上有關 API 的參考資料已經有很多了，應該可以讓初學者理解什麼是 API。但感覺沒有相關背景，對於這個詞還是很抽象。若遠若進的感覺。</p><p>如果你問我什麼是 API，我會跟你說：「API 就是拉麵店的販賣機」，所以在切入正題之前，我們要先來研究一下日本拉麵店會出現的販賣機。</p><h1 id="研究一下販賣機"><a href="#研究一下販賣機" class="headerlink" title="研究一下販賣機"></a>研究一下販賣機</h1><figure class="image-box">                <img src="https://i.imgur.com/ZkH7VF6.jpg" alt="販賣機" title="" class="">                <p>販賣機</p>            </figure><p>有去日本玩過嗎？或其實現在有些台灣的店家也用相同的方式來取代人力了。</p><p>上面的圖片是販賣餐券的販賣機，每一個按鈕就是一個品項，例如說咖哩飯、咖哩烏龍麵、咖哩豬排飯等等，也有一些像是「份量加大」、「加蛋」之類的選項。</p><p>當你決定好要什麼以後，就投錢進去，然後按下你要的選項的按鈕，就會有張餐券掉出來，上面寫著你所選的品項。簡單來說呢，就是個販售餐券的販賣機，跟你平常買可樂買果汁的販賣機大同小異。</p><p>拿到餐券之後呢，你就只要把它交給店員就好，店員就知道你要點什麼餐了。接著就是坐等餐點煮好，開始享用豐盛的一餐。</p><p>我第一次去日本的時候體驗到這種點餐方式覺得十分特別，但接下來我們要來想一下，它到底特別在哪裡。為了回答這個問題，我們先來回憶一下原本點餐怎麼點。</p><p>如果是跟以前一樣在櫃檯點餐，幫你點餐的會是店員，然後你要跟店員說你要什麼品項，也能夠進一步客製化，例如說：「一份燒肉套餐不要燒肉」或者是「雞排要切不要辣，炸酥一點，蒜多一點」，接著店員再透過電腦系統或者是直接跟內場說你要點什麼。</p><h2 id="那這跟我們用餐券販賣機差在哪裡呢？"><a href="#那這跟我們用餐券販賣機差在哪裡呢？" class="headerlink" title="那這跟我們用餐券販賣機差在哪裡呢？"></a>那這跟我們用餐券販賣機差在哪裡呢？</h2><h3 id="固定品項"><a href="#固定品項" class="headerlink" title="固定品項"></a>固定品項</h3><p>販賣機的品項是固定的，上面沒有的你點不到。沒有一個地方可以讓你輸入客製化資訊，所以如果沒有「不要薑」的按鈕，你的餐券上面就不會有這項資訊，你就點不到沒有薑的拉麵 __（這邊先不考慮直接跟店員說）__。</p><h3 id="減少溝通障礙"><a href="#減少溝通障礙" class="headerlink" title="減少溝通障礙"></a>減少溝通障礙</h3><p>你溝通的對象從店員變成了機器，壞處就像上面說的一樣，客製化程度有限，而好處就是沒有溝通問題。你不會講日文也沒關係，反正按鈕上有寫英文或中文，就算沒有也會有圖片，你按按鈕就可以點餐了，完全沒有語言障礙。</p><p>簡而言之，在你跟餐廳之間，__你們透過販賣機這個媒介來溝通__。你跟販賣機說你要什麼，然後得出一張餐券，接著把這個餐券交給餐廳，餐廳就會處理剩下的事情並且把餐點給你。</p><p>這過程當中你一句話都不用說，只需要透過按按鈕跟遞餐券，就完成了點餐加付款的程序。</p><p>好，上面我們講的都是以顧客的角度來看這件事，那接著我們來想想。</p><h2 id="為什麼店家要導入販賣機？導入販賣機有什麼好處？"><a href="#為什麼店家要導入販賣機？導入販賣機有什麼好處？" class="headerlink" title="為什麼店家要導入販賣機？導入販賣機有什麼好處？"></a>為什麼店家要導入販賣機？導入販賣機有什麼好處？</h2><h3 id="節省人力"><a href="#節省人力" class="headerlink" title="節省人力"></a>節省人力</h3><p>最直接能想到的一點就是節省人力，你只要買一台機器放在那邊，就解決了點餐跟買單這兩項作業，不用再放一個人到收銀台那邊，節省了一些人力成本。</p><p>而且對餐廳來說，原本點完餐之後店員要跟廚師說有什麼單，現在變成餐券之後，其實餐券直接拿給廚師就好，他們就知道要煮什麼了。</p><h3 id="固定點餐選項，節省客製化所需成本"><a href="#固定點餐選項，節省客製化所需成本" class="headerlink" title="固定點餐選項，節省客製化所需成本"></a>固定點餐選項，節省客製化所需成本</h3><p>因為改用了餐券販賣機，上面的選項都是你已經定好的，所以你不想提供的東西可以不放。</p><p>例如說你拉麵就是一個 size 不能加大也不能縮小，上面就可以不放加大的按鈕，客人也不用問你說：「麵可以加大嗎？」，因為販賣機上面沒有就是沒有。也不用再處理那種牛肉麵不要牛肉的情況，除非你自己在販賣機上面放這個選項。</p><p>這樣分析完之後，覺得販賣機還真的是好處多多，難怪日本一堆店都用販賣機來處理點餐跟買單，寫完上面這段之後連我自己都想買一台放家裡了。</p><p>但是，這到底跟 API 有什麼關係？</p><blockquote><p>別急，我們慢慢來嘛！先再來看一個故事再說。</p></blockquote><h1 id="民宿主人阿民的故事"><a href="#民宿主人阿民的故事" class="headerlink" title="民宿主人阿民的故事"></a>民宿主人阿民的故事</h1><p>阿民家裡經營著民宿的生意</p><figure class="image-box">                <img src="https://i.imgur.com/p6A2XM2.jpg" alt="民宿" title="" class="">                <p>民宿</p>            </figure><p>阿民在五歲那年，意識到爸媽每天都辛苦地用紙本紀錄訂房資訊，於是從那天起下定決心，要成為資工系的學生，幫家裡寫一個管理訂房的網站，讓爸媽開心。</p><p>時間快轉到十幾年後，他順利地就讀了資工系，除了系上教的那些科目，他也透過自學學習到了網頁開發的技術，並且成功做出了一個民宿管理系統，取名為 MingBook.com，用來管理家裡所經營的民宿。</p><p>這套系統成功地幫他們節省了很多時間，而且電子化之後愛護地球，從此以後都不必用紙本記錄東西，只要在電腦上按幾個鍵就好，十分方便。</p><p>不過，還有另一個更重要的問題還沒被解決。</p><p>目前能訂房的方式只有兩個，一個是打電話，另一個是到 MingBook.com 的官網。換句話說，如果 SEO（Search Engine Optimization，搜尋引擎優化） 做得不好，大家在使用 Google 搜尋民宿的時候找不到這個網站，就沒有人知道這間民宿的存在了。</p><p>再這樣下去，訂單會愈來愈少，最後只能落得關門大吉的下場。阿民心想這樣不行，決定想一些方法來解決這個問題。而他能想到最快也最直接的方法，就是把房間上架到訂房網站。</p><p>對欸，如果上架到那些 a 開頭 b 開頭 h 開頭的訂房網站，不就會帶更多流量進來嗎？這樣大家就有更多管道可以來訂房間了，不再受限於電話跟民宿官網。</p><p>「喂？請問是某某知名訂房網站嗎？想請問一下我如果想把我們家的民宿在你們網站上架，應該要怎麼做？」阿民打了通電話，想說直接去詢問應該怎麼上架，會比較有效率點。</p><p>『主要就是兩個資訊，第一個是您要提供空房資訊，我們才能在網站上顯示。第二個是使用者下訂單之後，必須提供一個方法讓我們把訂單傳送到您那裡』</p><p>「這很簡單嘛，我們已經有訂房網站了，是我自己寫的。你只要去網站上面就可以看到空房資訊跟下訂單了」阿民心想原來這麼容易，當初寫的系統還真好用。</p><p>『抱歉，__我們要的只有資料__，如果您提供的是一個網站，那我們工程師必須寫爬蟲去解析畫面才能拿到資料。__您必須提供 API 給我們喔__，等你準備好 API 再到官網去填資料就好了，謝謝』</p><p>就這樣，客服掛上了電話，留下一臉錯愕的阿民：</p><h2>到…到底什麼是 API？</h2><h1 id="白話講解-API"><a href="#白話講解-API" class="headerlink" title="白話講解 API"></a>白話講解 API</h1><p>無論是明示或暗示，相信你在上面兩個故事都有注意到一些我特別強調的地方。我發現如果要從正面來講 API 會非常難講，於是我決定先從側面切入。</p><p>一般來說當我們提到 API，會是這樣子的場景：</p><blockquote><p>你 API 串好了沒？你還沒串的話資料拿不到欸</p><p>我要來串 Google 登入的 API，讓我的網站可以用 Google 登入</p><p>請提供一個空房資訊的 API，我們才能顯示在網頁上面…</p></blockquote><p>從以上對話可以看出 <strong>API</strong> 背後隱含了 <strong>「交換資訊」</strong> 的目的。換句話說，如果你今天一直是一個人單打獨鬥，自己做自己的，基本上就不太會有 API 這種事情。需要串 API，就代表你需要別人的 __資料__，或者是別人需要你的 __資料__。</p><p>這邊特別把「資料」兩個字 highlight 起來，就是因為 API 基本上只牽涉到資料的交換，這是很重要的一部分。就像是阿民跟訂房網站的對話一樣，雖然阿民在自家網站上已經有訂房資訊了，但那個是 HTML，抓下來只會是一堆 <code>&lt;div&gt;</code>之類的標籤，不是「純粹的資訊」。</p><h2 id="純粹的資訊長什麼樣子"><a href="#純粹的資訊長什麼樣子" class="headerlink" title="純粹的資訊長什麼樣子?"></a>純粹的資訊長什麼樣子?</h2><p>我們來看一下 GitHub 的 API，只要你在網址列輸入：<a href="https://api.github.com/users/dandanXO">https://api.github.com/users/dandanXO</a> 並按下 Enter，就可以看到這樣的資訊：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20191103010509</span></span><br><span class="line"><span class="comment">// https://api.github.com/users/dandanXO</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;login&quot;</span>: <span class="string">&quot;dandanXO&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">19612288</span>,</span><br><span class="line">  <span class="attr">&quot;node_id&quot;</span>: <span class="string">&quot;MDQ6VXNlcjE5NjEyMjg4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;avatar_url&quot;</span>: <span class="string">&quot;https://avatars2.githubusercontent.com/u/19612288?v=4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gravatar_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;html_url&quot;</span>: <span class="string">&quot;https://github.com/dandanXO&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;followers_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/followers&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;following_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/following&#123;/other_user&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gists_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/gists&#123;/gist_id&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;starred_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;subscriptions_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/subscriptions&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;organizations_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/orgs&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;repos_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/repos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;events_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/events&#123;/privacy&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;received_events_url&quot;</span>: <span class="string">&quot;https://api.github.com/users/dandanXO/received_events&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;User&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;site_admin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;dandan&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;company&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;blog&quot;</span>: <span class="string">&quot;http://dandanxo.github.io/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;Taiwan&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;hireable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;bio&quot;</span>: <span class="string">&quot;Focus on F2E dev\r\nIf have any question please contact me\r\n&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;public_repos&quot;</span>: <span class="number">44</span>,</span><br><span class="line">  <span class="attr">&quot;public_gists&quot;</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">&quot;followers&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;following&quot;</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;2016-05-27T16:07:13Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;2019-10-25T01:05:53Z&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的第一個直覺可能是：「這什麼看不懂的東西？」，但你仔細看，會發現內容其實你看得懂。例如說有一個 <code>“location”: “Taipei, Taiwan”</code>，大概猜得出來意思是「地點在台北」，而 <code>“blog”: “http://blog.dandan.tw/”</code> 也猜得出來是「blog 是這個網站」的意思。</p><blockquote><p>這些就是「純粹的資料」，你可以拿到資料本身，而不是畫面。</p></blockquote><h2 id="那什麼叫做畫面？"><a href="#那什麼叫做畫面？" class="headerlink" title="那什麼叫做畫面？"></a>那什麼叫做畫面？</h2><p>這個就是畫面：</p><figure class="image-box">                <img src="https://i.imgur.com/9cCzrid.png" alt="畫面" title="" class="">                <p>畫面</p>            </figure><p>在上圖的畫面中，我們一樣可以看到各式各樣的資訊，但這是因為我們是人。你如果拿給機器看，機器會跟你說：「維大力？義大利？」，不知道你在供三小。</p><p>那機器要看什麼？要看我們上面用 GitHub API 回傳的那些資訊，只有資料本身而沒有任何畫面，這才是機器想看而且讀得懂的格式。所以，API 只會回傳資料，而不是像上面這樣的畫面，這是很重要的一點。</p><p>舉個例子，很多公司雖然都有後台系統可以看訂單資料，但對於某些人來說，必須要加個輸出成 Excel sheet 的功能，把資料都輸出出來才行。為什麼？因為我要的不是「看資料」，而是資料本身。我要把資料拿去做分析或是在 Excel 上面跑一些公式計算，所以我只需要資料。</p><p>所以簡單來說，API 就是個拿來交換資料的東西。</p><p>為什麼訂房網站要阿民開放 API 出來？因為它需要民宿的空房資料。<br>應該怎麼樣才能在網站上用 Google 的登入功能？串 Google 的 API。<br>要怎樣才能用程式碼操控印表機？用印表機提供的 API，就可以操控它。</p><p>當我提到「串 API」的時候，背後指的就是：「我要你的資料」或是「你要我的資料」，不過講資料其實有點侷限，更好的說法是：「我要用你的某個功能」或是「我要讓你用我的某個功能」。</p><p>以 Google 登入 API 來說，我要串是因為「我想在我的網站上使用 Google 登入」，而 Google 「開放」出這個 API 是因為「Google 想讓其他網站都可以用 Google 帳號登入」。</p><p>這邊會特地把「開放」兩個字標出來，意思就是說 Google 沒有開放出來的功能，你就不能用。</p><h2>赫然發現，怎麼覺得這個概念跟開頭講的販賣機有點像？</h2><h1 id="連結販賣機與民宿網站的例子"><a href="#連結販賣機與民宿網站的例子" class="headerlink" title="連結販賣機與民宿網站的例子"></a>連結販賣機與民宿網站的例子</h1><p>仔細想想，會發現餐券販賣機也是同樣的。<br>為什麼會有餐券販賣機？廢話，因為餐廳要賣東西啊，這樣才叫做餐廳，提供食物以換取報酬。餐廳要賣食物，所以提供而且只提供餐券販賣機這個介面讓使用者來使用。`git</p><p>為什麼在阿民的民宿網站必須提供 API 給訂房網站？其中一個原因是阿民不可能把房間資訊的資料庫直接給他們嘛，這樣子顧客資料就全都外洩了。所以透過 API，阿民可以自己決定什麼要對外開放。</p><p>這跟販賣機是一樣的，販賣機上的按鈕決定了你要賣什麼餐點給顧客。如果今天沒有販賣機沒有店員，你要讓消費者自己衝進廚房跟廚師說他要點甚麼，你的獨家配方都被看光了，你覺得有可能嗎？</p><p>顧客透過販賣機這個界面來點餐，就跟訂房網站透過 API 才存取阿民家的房間資訊是一樣的。這樣你大概可以理解為什麼 API 的重點是後面那個 I，Interface 了。</p><p>透過介面，可以把兩端串連起來，卻又讓兩端不會互相干擾。訂房網站看得到 MingBook.com 還剩幾間房間，卻看不到顧客資料。阿民可以知道訂房網站上面自己的訂單有哪些，可是沒辦法看到訂房網站其他民宿的訂單。</p><p>當阿民跟訂房網站合作的時候，彼此之間會有資料交換的需求。但兩方都不可能門戶大開，直接把後台與資料庫全部給對方看。這時候就需要 API，透過 API，來決定什麼該開放，而什麼又不該。開放的還可以覺得要開放到什麼程度。</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>API 是什麼？就是日本拉麵店賣餐券的販賣機。</p><p>我要串接 API 來取得房間資訊 </p><blockquote><p>=&gt;我要看販賣機來確定拉麵賣完沒</p></blockquote><p>訂房網站必須透過 API 來我的網站下訂單</p><blockquote><p>=&gt; 顧客必須透過販賣機來我的餐廳點餐</p></blockquote><p>API 只給我 email 跟姓名，地址拿不到</p><blockquote><p>=&gt; 販賣機只讓我點拉麵，沒辦法不要蔥花</p></blockquote><p>API 壞了，怎麼文件上寫回傳使用者資訊，卻傳成訂單資訊？</p><blockquote><p>=&gt; 販賣機壞了，怎麼按鈕上面寫醬油拉麵，餐券卻寫燒肉飯？</p></blockquote><p>什麼是販賣機？</p><blockquote><p>是一台能讓顧客與餐廳雙方溝通的機器。</p></blockquote><p>什麼是 API？</p><blockquote><p>是一個能讓生產者與消費者雙方溝通的介面。</p></blockquote><p>來自於 <a href="https://medium.com/@hulitw/ramen-and-api-6238437dc544">huli blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 教學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學 </tag>
            
            <tag> api </tag>
            
            <tag> 故事 </tag>
            
            <tag> 拉麵 </tag>
            
            <tag> 販賣機 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
